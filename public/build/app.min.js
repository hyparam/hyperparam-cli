function V(V){return V&&V.__esModule&&Object.prototype.hasOwnProperty.call(V,"default")?V.default:V}var l,W,U={exports:{}},Z={};function R(){if(l)return Z;l=1;var V=Symbol.for("react.element"),W=Symbol.for("react.portal"),U=Symbol.for("react.fragment"),R=Symbol.for("react.strict_mode"),d=Symbol.for("react.profiler"),N=Symbol.for("react.provider"),F=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),a=Symbol.for("react.suspense"),e=Symbol.for("react.memo"),t=Symbol.for("react.lazy"),n=Symbol.iterator;var M={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},k=Object.assign,m={};function c(V,l,W){this.props=V,this.context=l,this.refs=m,this.updater=W||M}function p(){}function b(V,l,W){this.props=V,this.context=l,this.refs=m,this.updater=W||M}c.prototype.isReactComponent={},c.prototype.setState=function(V,l){if("object"!=typeof V&&"function"!=typeof V&&null!=V)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,V,l,"setState")},c.prototype.forceUpdate=function(V){this.updater.enqueueForceUpdate(this,V,"forceUpdate")},p.prototype=c.prototype;var S=b.prototype=new p;S.constructor=b,k(S,c.prototype),S.isPureReactComponent=!0;var E=Array.isArray,h=Object.prototype.hasOwnProperty,s={current:null},Y={key:!0,ref:!0,__self:!0,__source:!0};function J(l,W,U){var Z,R={},d=null,N=null;if(null!=W)for(Z in void 0!==W.ref&&(N=W.ref),void 0!==W.key&&(d=""+W.key),W)h.call(W,Z)&&!Y.hasOwnProperty(Z)&&(R[Z]=W[Z]);var F=arguments.length-2;if(1===F)R.children=U;else if(1<F){for(var T=Array(F),a=0;a<F;a++)T[a]=arguments[a+2];R.children=T}if(l&&l.defaultProps)for(Z in F=l.defaultProps)void 0===R[Z]&&(R[Z]=F[Z]);return{$$typeof:V,type:l,key:d,ref:N,props:R,_owner:s.current}}function G(l){return"object"==typeof l&&null!==l&&l.$$typeof===V}var X=/\/+/g;function i(V,l){return"object"==typeof V&&null!==V&&null!=V.key?function(V){var l={"=":"=0",":":"=2"};return"$"+V.replace(/[=:]/g,(function(V){return l[V]}))}(""+V.key):l.toString(36)}function x(l,U,Z,R,d){var N=typeof l;"undefined"!==N&&"boolean"!==N||(l=null);var F=!1;if(null===l)F=!0;else switch(N){case"string":case"number":F=!0;break;case"object":switch(l.$$typeof){case V:case W:F=!0}}if(F)return d=d(F=l),l=""===R?"."+i(F,0):R,E(d)?(Z="",null!=l&&(Z=l.replace(X,"$&/")+"/"),x(d,U,Z,"",(function(V){return V}))):null!=d&&(G(d)&&(d=function(l,W){return{$$typeof:V,type:l.type,key:W,ref:l.ref,props:l.props,_owner:l._owner}}(d,Z+(!d.key||F&&F.key===d.key?"":(""+d.key).replace(X,"$&/")+"/")+l)),U.push(d)),1;if(F=0,R=""===R?".":R+":",E(l))for(var T=0;T<l.length;T++){var a=R+i(N=l[T],T);F+=x(N,U,Z,a,d)}else if(a=function(V){return null===V||"object"!=typeof V?null:"function"==typeof(V=n&&V[n]||V["@@iterator"])?V:null}(l),"function"==typeof a)for(l=a.call(l),T=0;!(N=l.next()).done;)F+=x(N=N.value,U,Z,a=R+i(N,T++),d);else if("object"===N)throw U=String(l),Error("Objects are not valid as a React child (found: "+("[object Object]"===U?"object with keys {"+Object.keys(l).join(", ")+"}":U)+"). If you meant to render a collection of children, use an array instead.");return F}function r(V,l,W){if(null==V)return V;var U=[],Z=0;return x(V,U,"","",(function(V){return l.call(W,V,Z++)})),U}function Q(V){if(-1===V._status){var l=V._result;(l=l()).then((function(l){0!==V._status&&-1!==V._status||(V._status=1,V._result=l)}),(function(l){0!==V._status&&-1!==V._status||(V._status=2,V._result=l)})),-1===V._status&&(V._status=0,V._result=l)}if(1===V._status)return V._result.default;throw V._result}var z={current:null},o={transition:null},u={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:o,ReactCurrentOwner:s};function w(){throw Error("act(...) is not supported in production builds of React.")}return Z.Children={map:r,forEach:function(V,l,W){r(V,(function(){l.apply(this,arguments)}),W)},count:function(V){var l=0;return r(V,(function(){l++})),l},toArray:function(V){return r(V,(function(V){return V}))||[]},only:function(V){if(!G(V))throw Error("React.Children.only expected to receive a single React element child.");return V}},Z.Component=c,Z.Fragment=U,Z.Profiler=d,Z.PureComponent=b,Z.StrictMode=R,Z.Suspense=a,Z.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=u,Z.act=w,Z.cloneElement=function(l,W,U){if(null==l)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+l+".");var Z=k({},l.props),R=l.key,d=l.ref,N=l._owner;if(null!=W){if(void 0!==W.ref&&(d=W.ref,N=s.current),void 0!==W.key&&(R=""+W.key),l.type&&l.type.defaultProps)var F=l.type.defaultProps;for(T in W)h.call(W,T)&&!Y.hasOwnProperty(T)&&(Z[T]=void 0===W[T]&&void 0!==F?F[T]:W[T])}var T=arguments.length-2;if(1===T)Z.children=U;else if(1<T){F=Array(T);for(var a=0;a<T;a++)F[a]=arguments[a+2];Z.children=F}return{$$typeof:V,type:l.type,key:R,ref:d,props:Z,_owner:N}},Z.createContext=function(V){return(V={$$typeof:F,_currentValue:V,_currentValue2:V,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:N,_context:V},V.Consumer=V},Z.createElement=J,Z.createFactory=function(V){var l=J.bind(null,V);return l.type=V,l},Z.createRef=function(){return{current:null}},Z.forwardRef=function(V){return{$$typeof:T,render:V}},Z.isValidElement=G,Z.lazy=function(V){return{$$typeof:t,_payload:{_status:-1,_result:V},_init:Q}},Z.memo=function(V,l){return{$$typeof:e,type:V,compare:void 0===l?null:l}},Z.startTransition=function(V){var l=o.transition;o.transition={};try{V()}finally{o.transition=l}},Z.unstable_act=w,Z.useCallback=function(V,l){return z.current.useCallback(V,l)},Z.useContext=function(V){return z.current.useContext(V)},Z.useDebugValue=function(){},Z.useDeferredValue=function(V){return z.current.useDeferredValue(V)},Z.useEffect=function(V,l){return z.current.useEffect(V,l)},Z.useId=function(){return z.current.useId()},Z.useImperativeHandle=function(V,l,W){return z.current.useImperativeHandle(V,l,W)},Z.useInsertionEffect=function(V,l){return z.current.useInsertionEffect(V,l)},Z.useLayoutEffect=function(V,l){return z.current.useLayoutEffect(V,l)},Z.useMemo=function(V,l){return z.current.useMemo(V,l)},Z.useReducer=function(V,l,W){return z.current.useReducer(V,l,W)},Z.useRef=function(V){return z.current.useRef(V)},Z.useState=function(V){return z.current.useState(V)},Z.useSyncExternalStore=function(V,l,W){return z.current.useSyncExternalStore(V,l,W)},Z.useTransition=function(){return z.current.useTransition()},Z.version="18.3.1",Z}function d(){return W||(W=1,U.exports=R()),U.exports}var N,F,T,a,e,t=d(),n=V(t),M={},k={exports:{}},m={},c={exports:{}},p={};function b(){return F||(F=1,c.exports=(N||(N=1,function(V){function l(V,l){var W=V.length;V.push(l);V:for(;0<W;){var U=W-1>>>1,R=V[U];if(!(0<Z(R,l)))break V;V[U]=l,V[W]=R,W=U}}function W(V){return 0===V.length?null:V[0]}function U(V){if(0===V.length)return null;var l=V[0],W=V.pop();if(W!==l){V[0]=W;V:for(var U=0,R=V.length,d=R>>>1;U<d;){var N=2*(U+1)-1,F=V[N],T=N+1,a=V[T];if(0>Z(F,W))T<R&&0>Z(a,F)?(V[U]=a,V[T]=W,U=T):(V[U]=F,V[N]=W,U=N);else{if(!(T<R&&0>Z(a,W)))break V;V[U]=a,V[T]=W,U=T}}}return l}function Z(V,l){var W=V.sortIndex-l.sortIndex;return 0!==W?W:V.id-l.id}if("object"==typeof performance&&"function"==typeof performance.now){var R=performance;V.unstable_now=function(){return R.now()}}else{var d=Date,N=d.now();V.unstable_now=function(){return d.now()-N}}var F=[],T=[],a=1,e=null,t=3,n=!1,M=!1,k=!1,m="function"==typeof setTimeout?setTimeout:null,c="function"==typeof clearTimeout?clearTimeout:null,p="undefined"!=typeof setImmediate?setImmediate:null;function b(V){for(var Z=W(T);null!==Z;){if(null===Z.callback)U(T);else{if(!(Z.startTime<=V))break;U(T),Z.sortIndex=Z.expirationTime,l(F,Z)}Z=W(T)}}function S(V){if(k=!1,b(V),!M)if(null!==W(F))M=!0,z(E);else{var l=W(T);null!==l&&o(S,l.startTime-V)}}function E(l,Z){M=!1,k&&(k=!1,c(J),J=-1),n=!0;var R=t;try{for(b(Z),e=W(F);null!==e&&(!(e.expirationTime>Z)||l&&!i());){var d=e.callback;if("function"==typeof d){e.callback=null,t=e.priorityLevel;var N=d(e.expirationTime<=Z);Z=V.unstable_now(),"function"==typeof N?e.callback=N:e===W(F)&&U(F),b(Z)}else U(F);e=W(F)}if(null!==e)var a=!0;else{var m=W(T);null!==m&&o(S,m.startTime-Z),a=!1}return a}finally{e=null,t=R,n=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var h,s=!1,Y=null,J=-1,G=5,X=-1;function i(){return!(V.unstable_now()-X<G)}function x(){if(null!==Y){var l=V.unstable_now();X=l;var W=!0;try{W=Y(!0,l)}finally{W?h():(s=!1,Y=null)}}else s=!1}if("function"==typeof p)h=function(){p(x)};else if("undefined"!=typeof MessageChannel){var r=new MessageChannel,Q=r.port2;r.port1.onmessage=x,h=function(){Q.postMessage(null)}}else h=function(){m(x,0)};function z(V){Y=V,s||(s=!0,h())}function o(l,W){J=m((function(){l(V.unstable_now())}),W)}V.unstable_IdlePriority=5,V.unstable_ImmediatePriority=1,V.unstable_LowPriority=4,V.unstable_NormalPriority=3,V.unstable_Profiling=null,V.unstable_UserBlockingPriority=2,V.unstable_cancelCallback=function(V){V.callback=null},V.unstable_continueExecution=function(){M||n||(M=!0,z(E))},V.unstable_forceFrameRate=function(V){0>V||125<V?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):G=0<V?Math.floor(1e3/V):5},V.unstable_getCurrentPriorityLevel=function(){return t},V.unstable_getFirstCallbackNode=function(){return W(F)},V.unstable_next=function(V){switch(t){case 1:case 2:case 3:var l=3;break;default:l=t}var W=t;t=l;try{return V()}finally{t=W}},V.unstable_pauseExecution=function(){},V.unstable_requestPaint=function(){},V.unstable_runWithPriority=function(V,l){switch(V){case 1:case 2:case 3:case 4:case 5:break;default:V=3}var W=t;t=V;try{return l()}finally{t=W}},V.unstable_scheduleCallback=function(U,Z,R){var d=V.unstable_now();switch(R="object"==typeof R&&null!==R&&"number"==typeof(R=R.delay)&&0<R?d+R:d,U){case 1:var N=-1;break;case 2:N=250;break;case 5:N=1073741823;break;case 4:N=1e4;break;default:N=5e3}return U={id:a++,callback:Z,priorityLevel:U,startTime:R,expirationTime:N=R+N,sortIndex:-1},R>d?(U.sortIndex=R,l(T,U),null===W(F)&&U===W(T)&&(k?(c(J),J=-1):k=!0,o(S,R-d))):(U.sortIndex=N,l(F,U),M||n||(M=!0,z(E))),U},V.unstable_shouldYield=i,V.unstable_wrapCallback=function(V){var l=t;return function(){var W=t;t=l;try{return V.apply(this,arguments)}finally{t=W}}}}(p)),p)),c.exports}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function S(){if(T)return m;T=1;var V=d(),l=b();function W(V){for(var l="https://reactjs.org/docs/error-decoder.html?invariant="+V,W=1;W<arguments.length;W++)l+="&args[]="+encodeURIComponent(arguments[W]);return"Minified React error #"+V+"; visit "+l+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var U=new Set,Z={};function R(V,l){N(V,l),N(V+"Capture",l)}function N(V,l){for(Z[V]=l,V=0;V<l.length;V++)U.add(l[V])}var F=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),a=Object.prototype.hasOwnProperty,e=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,t={},n={};function M(V,l,W,U,Z,R,d){this.acceptsBooleans=2===l||3===l||4===l,this.attributeName=U,this.attributeNamespace=Z,this.mustUseProperty=W,this.propertyName=V,this.type=l,this.sanitizeURL=R,this.removeEmptyString=d}var k={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(V){k[V]=new M(V,0,!1,V,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(V){var l=V[0];k[l]=new M(l,1,!1,V[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(V){k[V]=new M(V,2,!1,V.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(V){k[V]=new M(V,2,!1,V,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(V){k[V]=new M(V,3,!1,V.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(V){k[V]=new M(V,3,!0,V,null,!1,!1)})),["capture","download"].forEach((function(V){k[V]=new M(V,4,!1,V,null,!1,!1)})),["cols","rows","size","span"].forEach((function(V){k[V]=new M(V,6,!1,V,null,!1,!1)})),["rowSpan","start"].forEach((function(V){k[V]=new M(V,5,!1,V.toLowerCase(),null,!1,!1)}));var c=/[\-:]([a-z])/g;function p(V){return V[1].toUpperCase()}function S(V,l,W,U){var Z=k.hasOwnProperty(l)?k[l]:null;(null!==Z?0!==Z.type:U||!(2<l.length)||"o"!==l[0]&&"O"!==l[0]||"n"!==l[1]&&"N"!==l[1])&&(function(V,l,W,U){if(null==l||function(V,l,W,U){if(null!==W&&0===W.type)return!1;switch(typeof l){case"function":case"symbol":return!0;case"boolean":return!U&&(null!==W?!W.acceptsBooleans:"data-"!==(V=V.toLowerCase().slice(0,5))&&"aria-"!==V);default:return!1}}(V,l,W,U))return!0;if(U)return!1;if(null!==W)switch(W.type){case 3:return!l;case 4:return!1===l;case 5:return isNaN(l);case 6:return isNaN(l)||1>l}return!1}(l,W,Z,U)&&(W=null),U||null===Z?function(V){return!!a.call(n,V)||!a.call(t,V)&&(e.test(V)?n[V]=!0:(t[V]=!0,!1))}(l)&&(null===W?V.removeAttribute(l):V.setAttribute(l,""+W)):Z.mustUseProperty?V[Z.propertyName]=null===W?3!==Z.type&&"":W:(l=Z.attributeName,U=Z.attributeNamespace,null===W?V.removeAttribute(l):(W=3===(Z=Z.type)||4===Z&&!0===W?"":""+W,U?V.setAttributeNS(U,l,W):V.setAttribute(l,W))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(V){var l=V.replace(c,p);k[l]=new M(l,1,!1,V,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(V){var l=V.replace(c,p);k[l]=new M(l,1,!1,V,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(V){var l=V.replace(c,p);k[l]=new M(l,1,!1,V,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(V){k[V]=new M(V,1,!1,V.toLowerCase(),null,!1,!1)})),k.xlinkHref=new M("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(V){k[V]=new M(V,1,!1,V.toLowerCase(),null,!0,!0)}));var E=V.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,h=Symbol.for("react.element"),s=Symbol.for("react.portal"),Y=Symbol.for("react.fragment"),J=Symbol.for("react.strict_mode"),G=Symbol.for("react.profiler"),X=Symbol.for("react.provider"),i=Symbol.for("react.context"),x=Symbol.for("react.forward_ref"),r=Symbol.for("react.suspense"),Q=Symbol.for("react.suspense_list"),z=Symbol.for("react.memo"),o=Symbol.for("react.lazy"),u=Symbol.for("react.offscreen"),w=Symbol.iterator;function y(V){return null===V||"object"!=typeof V?null:"function"==typeof(V=w&&V[w]||V["@@iterator"])?V:null}var j,B=Object.assign;function D(V){if(void 0===j)try{throw Error()}catch(V){var l=V.stack.trim().match(/\n( *(at )?)/);j=l&&l[1]||""}return"\n"+j+V}var C=!1;function H(V,l){if(!V||C)return"";C=!0;var W=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(l)if(l=function(){throw Error()},Object.defineProperty(l.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(l,[])}catch(V){var U=V}Reflect.construct(V,[],l)}else{try{l.call()}catch(V){U=V}V.call(l.prototype)}else{try{throw Error()}catch(V){U=V}V()}}catch(l){if(l&&U&&"string"==typeof l.stack){for(var Z=l.stack.split("\n"),R=U.stack.split("\n"),d=Z.length-1,N=R.length-1;1<=d&&0<=N&&Z[d]!==R[N];)N--;for(;1<=d&&0<=N;d--,N--)if(Z[d]!==R[N]){if(1!==d||1!==N)do{if(d--,0>--N||Z[d]!==R[N]){var F="\n"+Z[d].replace(" at new "," at ");return V.displayName&&F.includes("<anonymous>")&&(F=F.replace("<anonymous>",V.displayName)),F}}while(1<=d&&0<=N);break}}}finally{C=!1,Error.prepareStackTrace=W}return(V=V?V.displayName||V.name:"")?D(V):""}function I(V){switch(V.tag){case 5:return D(V.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return V=H(V.type,!1);case 11:return V=H(V.type.render,!1);case 1:return V=H(V.type,!0);default:return""}}function O(V){if(null==V)return null;if("function"==typeof V)return V.displayName||V.name||null;if("string"==typeof V)return V;switch(V){case Y:return"Fragment";case s:return"Portal";case G:return"Profiler";case J:return"StrictMode";case r:return"Suspense";case Q:return"SuspenseList"}if("object"==typeof V)switch(V.$$typeof){case i:return(V.displayName||"Context")+".Consumer";case X:return(V._context.displayName||"Context")+".Provider";case x:var l=V.render;return(V=V.displayName)||(V=""!==(V=l.displayName||l.name||"")?"ForwardRef("+V+")":"ForwardRef"),V;case z:return null!==(l=V.displayName||null)?l:O(V.type)||"Memo";case o:l=V._payload,V=V._init;try{return O(V(l))}catch(V){}}return null}function L(V){var l=V.type;switch(V.tag){case 24:return"Cache";case 9:return(l.displayName||"Context")+".Consumer";case 10:return(l._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return V=(V=l.render).displayName||V.name||"",l.displayName||(""!==V?"ForwardRef("+V+")":"ForwardRef");case 7:return"Fragment";case 5:return l;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return O(l);case 8:return l===J?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof l)return l.displayName||l.name||null;if("string"==typeof l)return l}return null}function K(V){switch(typeof V){case"boolean":case"number":case"string":case"undefined":case"object":return V;default:return""}}function g(V){var l=V.type;return(V=V.nodeName)&&"input"===V.toLowerCase()&&("checkbox"===l||"radio"===l)}function v(V){V._valueTracker||(V._valueTracker=function(V){var l=g(V)?"checked":"value",W=Object.getOwnPropertyDescriptor(V.constructor.prototype,l),U=""+V[l];if(!V.hasOwnProperty(l)&&void 0!==W&&"function"==typeof W.get&&"function"==typeof W.set){var Z=W.get,R=W.set;return Object.defineProperty(V,l,{configurable:!0,get:function(){return Z.call(this)},set:function(V){U=""+V,R.call(this,V)}}),Object.defineProperty(V,l,{enumerable:W.enumerable}),{getValue:function(){return U},setValue:function(V){U=""+V},stopTracking:function(){V._valueTracker=null,delete V[l]}}}}(V))}function f(V){if(!V)return!1;var l=V._valueTracker;if(!l)return!0;var W=l.getValue(),U="";return V&&(U=g(V)?V.checked?"true":"false":V.value),(V=U)!==W&&(l.setValue(V),!0)}function P(V){if(void 0===(V=V||("undefined"!=typeof document?document:void 0)))return null;try{return V.activeElement||V.body}catch(l){return V.body}}function A(V,l){var W=l.checked;return B({},l,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=W?W:V._wrapperState.initialChecked})}function q(V,l){var W=null==l.defaultValue?"":l.defaultValue,U=null!=l.checked?l.checked:l.defaultChecked;W=K(null!=l.value?l.value:W),V._wrapperState={initialChecked:U,initialValue:W,controlled:"checkbox"===l.type||"radio"===l.type?null!=l.checked:null!=l.value}}function _(V,l){null!=(l=l.checked)&&S(V,"checked",l,!1)}function $(V,l){_(V,l);var W=K(l.value),U=l.type;if(null!=W)"number"===U?(0===W&&""===V.value||V.value!=W)&&(V.value=""+W):V.value!==""+W&&(V.value=""+W);else if("submit"===U||"reset"===U)return void V.removeAttribute("value");l.hasOwnProperty("value")?lV(V,l.type,W):l.hasOwnProperty("defaultValue")&&lV(V,l.type,K(l.defaultValue)),null==l.checked&&null!=l.defaultChecked&&(V.defaultChecked=!!l.defaultChecked)}function VV(V,l,W){if(l.hasOwnProperty("value")||l.hasOwnProperty("defaultValue")){var U=l.type;if(!("submit"!==U&&"reset"!==U||void 0!==l.value&&null!==l.value))return;l=""+V._wrapperState.initialValue,W||l===V.value||(V.value=l),V.defaultValue=l}""!==(W=V.name)&&(V.name=""),V.defaultChecked=!!V._wrapperState.initialChecked,""!==W&&(V.name=W)}function lV(V,l,W){"number"===l&&P(V.ownerDocument)===V||(null==W?V.defaultValue=""+V._wrapperState.initialValue:V.defaultValue!==""+W&&(V.defaultValue=""+W))}var WV=Array.isArray;function UV(V,l,W,U){if(V=V.options,l){l={};for(var Z=0;Z<W.length;Z++)l["$"+W[Z]]=!0;for(W=0;W<V.length;W++)Z=l.hasOwnProperty("$"+V[W].value),V[W].selected!==Z&&(V[W].selected=Z),Z&&U&&(V[W].defaultSelected=!0)}else{for(W=""+K(W),l=null,Z=0;Z<V.length;Z++){if(V[Z].value===W)return V[Z].selected=!0,void(U&&(V[Z].defaultSelected=!0));null!==l||V[Z].disabled||(l=V[Z])}null!==l&&(l.selected=!0)}}function ZV(V,l){if(null!=l.dangerouslySetInnerHTML)throw Error(W(91));return B({},l,{value:void 0,defaultValue:void 0,children:""+V._wrapperState.initialValue})}function RV(V,l){var U=l.value;if(null==U){if(U=l.children,l=l.defaultValue,null!=U){if(null!=l)throw Error(W(92));if(WV(U)){if(1<U.length)throw Error(W(93));U=U[0]}l=U}null==l&&(l=""),U=l}V._wrapperState={initialValue:K(U)}}function dV(V,l){var W=K(l.value),U=K(l.defaultValue);null!=W&&((W=""+W)!==V.value&&(V.value=W),null==l.defaultValue&&V.defaultValue!==W&&(V.defaultValue=W)),null!=U&&(V.defaultValue=""+U)}function NV(V){var l=V.textContent;l===V._wrapperState.initialValue&&""!==l&&null!==l&&(V.value=l)}function FV(V){switch(V){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function TV(V,l){return null==V||"http://www.w3.org/1999/xhtml"===V?FV(l):"http://www.w3.org/2000/svg"===V&&"foreignObject"===l?"http://www.w3.org/1999/xhtml":V}var aV,eV,tV=(eV=function(V,l){if("http://www.w3.org/2000/svg"!==V.namespaceURI||"innerHTML"in V)V.innerHTML=l;else{for((aV=aV||document.createElement("div")).innerHTML="<svg>"+l.valueOf().toString()+"</svg>",l=aV.firstChild;V.firstChild;)V.removeChild(V.firstChild);for(;l.firstChild;)V.appendChild(l.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(V,l,W,U){MSApp.execUnsafeLocalFunction((function(){return eV(V,l)}))}:eV);function nV(V,l){if(l){var W=V.firstChild;if(W&&W===V.lastChild&&3===W.nodeType)return void(W.nodeValue=l)}V.textContent=l}var MV={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kV=["Webkit","ms","Moz","O"];function mV(V,l,W){return null==l||"boolean"==typeof l||""===l?"":W||"number"!=typeof l||0===l||MV.hasOwnProperty(V)&&MV[V]?(""+l).trim():l+"px"}function cV(V,l){for(var W in V=V.style,l)if(l.hasOwnProperty(W)){var U=0===W.indexOf("--"),Z=mV(W,l[W],U);"float"===W&&(W="cssFloat"),U?V.setProperty(W,Z):V[W]=Z}}Object.keys(MV).forEach((function(V){kV.forEach((function(l){l=l+V.charAt(0).toUpperCase()+V.substring(1),MV[l]=MV[V]}))}));var pV=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function bV(V,l){if(l){if(pV[V]&&(null!=l.children||null!=l.dangerouslySetInnerHTML))throw Error(W(137,V));if(null!=l.dangerouslySetInnerHTML){if(null!=l.children)throw Error(W(60));if("object"!=typeof l.dangerouslySetInnerHTML||!("__html"in l.dangerouslySetInnerHTML))throw Error(W(61))}if(null!=l.style&&"object"!=typeof l.style)throw Error(W(62))}}function SV(V,l){if(-1===V.indexOf("-"))return"string"==typeof l.is;switch(V){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var EV=null;function hV(V){return(V=V.target||V.srcElement||window).correspondingUseElement&&(V=V.correspondingUseElement),3===V.nodeType?V.parentNode:V}var sV=null,YV=null,JV=null;function GV(V){if(V=bZ(V)){if("function"!=typeof sV)throw Error(W(280));var l=V.stateNode;l&&(l=EZ(l),sV(V.stateNode,V.type,l))}}function XV(V){YV?JV?JV.push(V):JV=[V]:YV=V}function iV(){if(YV){var V=YV,l=JV;if(JV=YV=null,GV(V),l)for(V=0;V<l.length;V++)GV(l[V])}}function xV(V,l){return V(l)}function rV(){}var QV=!1;function zV(V,l,W){if(QV)return V(l,W);QV=!0;try{return xV(V,l,W)}finally{QV=!1,(null!==YV||null!==JV)&&(rV(),iV())}}function oV(V,l){var U=V.stateNode;if(null===U)return null;var Z=EZ(U);if(null===Z)return null;U=Z[l];V:switch(l){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(Z=!Z.disabled)||(Z=!("button"===(V=V.type)||"input"===V||"select"===V||"textarea"===V)),V=!Z;break V;default:V=!1}if(V)return null;if(U&&"function"!=typeof U)throw Error(W(231,l,typeof U));return U}var uV=!1;if(F)try{var wV={};Object.defineProperty(wV,"passive",{get:function(){uV=!0}}),window.addEventListener("test",wV,wV),window.removeEventListener("test",wV,wV)}catch(eV){uV=!1}function yV(V,l,W,U,Z,R,d,N,F){var T=Array.prototype.slice.call(arguments,3);try{l.apply(W,T)}catch(V){this.onError(V)}}var jV=!1,BV=null,DV=!1,CV=null,HV={onError:function(V){jV=!0,BV=V}};function IV(V,l,W,U,Z,R,d,N,F){jV=!1,BV=null,yV.apply(HV,arguments)}function OV(V){var l=V,W=V;if(V.alternate)for(;l.return;)l=l.return;else{V=l;do{!!(4098&(l=V).flags)&&(W=l.return),V=l.return}while(V)}return 3===l.tag?W:null}function LV(V){if(13===V.tag){var l=V.memoizedState;if(null===l&&(null!==(V=V.alternate)&&(l=V.memoizedState)),null!==l)return l.dehydrated}return null}function KV(V){if(OV(V)!==V)throw Error(W(188))}function gV(V){return V=function(V){var l=V.alternate;if(!l){if(null===(l=OV(V)))throw Error(W(188));return l!==V?null:V}for(var U=V,Z=l;;){var R=U.return;if(null===R)break;var d=R.alternate;if(null===d){if(null!==(Z=R.return)){U=Z;continue}break}if(R.child===d.child){for(d=R.child;d;){if(d===U)return KV(R),V;if(d===Z)return KV(R),l;d=d.sibling}throw Error(W(188))}if(U.return!==Z.return)U=R,Z=d;else{for(var N=!1,F=R.child;F;){if(F===U){N=!0,U=R,Z=d;break}if(F===Z){N=!0,Z=R,U=d;break}F=F.sibling}if(!N){for(F=d.child;F;){if(F===U){N=!0,U=d,Z=R;break}if(F===Z){N=!0,Z=d,U=R;break}F=F.sibling}if(!N)throw Error(W(189))}}if(U.alternate!==Z)throw Error(W(190))}if(3!==U.tag)throw Error(W(188));return U.stateNode.current===U?V:l}(V),null!==V?vV(V):null}function vV(V){if(5===V.tag||6===V.tag)return V;for(V=V.child;null!==V;){var l=vV(V);if(null!==l)return l;V=V.sibling}return null}var fV=l.unstable_scheduleCallback,PV=l.unstable_cancelCallback,AV=l.unstable_shouldYield,qV=l.unstable_requestPaint,_V=l.unstable_now,$V=l.unstable_getCurrentPriorityLevel,Vl=l.unstable_ImmediatePriority,ll=l.unstable_UserBlockingPriority,Wl=l.unstable_NormalPriority,Ul=l.unstable_LowPriority,Zl=l.unstable_IdlePriority,Rl=null,dl=null;var Nl=Math.clz32?Math.clz32:function(V){return V>>>=0,0===V?32:31-(Fl(V)/Tl|0)|0},Fl=Math.log,Tl=Math.LN2;var al=64,el=4194304;function tl(V){switch(V&-V){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&V;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&V;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return V}}function nl(V,l){var W=V.pendingLanes;if(0===W)return 0;var U=0,Z=V.suspendedLanes,R=V.pingedLanes,d=268435455&W;if(0!==d){var N=d&~Z;0!==N?U=tl(N):0!==(R&=d)&&(U=tl(R))}else 0!==(d=W&~Z)?U=tl(d):0!==R&&(U=tl(R));if(0===U)return 0;if(0!==l&&l!==U&&!(l&Z)&&((Z=U&-U)>=(R=l&-l)||16===Z&&4194240&R))return l;if(4&U&&(U|=16&W),0!==(l=V.entangledLanes))for(V=V.entanglements,l&=U;0<l;)Z=1<<(W=31-Nl(l)),U|=V[W],l&=~Z;return U}function Ml(V,l){switch(V){case 1:case 2:case 4:return l+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return l+5e3;default:return-1}}function kl(V){return 0!==(V=-1073741825&V.pendingLanes)?V:1073741824&V?1073741824:0}function ml(){var V=al;return!(4194240&(al<<=1))&&(al=64),V}function cl(V){for(var l=[],W=0;31>W;W++)l.push(V);return l}function pl(V,l,W){V.pendingLanes|=l,536870912!==l&&(V.suspendedLanes=0,V.pingedLanes=0),(V=V.eventTimes)[l=31-Nl(l)]=W}function bl(V,l){var W=V.entangledLanes|=l;for(V=V.entanglements;W;){var U=31-Nl(W),Z=1<<U;Z&l|V[U]&l&&(V[U]|=l),W&=~Z}}var Sl=0;function El(V){return 1<(V&=-V)?4<V?268435455&V?16:536870912:4:1}var hl,sl,Yl,Jl,Gl,Xl=!1,il=[],xl=null,rl=null,Ql=null,zl=new Map,ol=new Map,ul=[],wl="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function yl(V,l){switch(V){case"focusin":case"focusout":xl=null;break;case"dragenter":case"dragleave":rl=null;break;case"mouseover":case"mouseout":Ql=null;break;case"pointerover":case"pointerout":zl.delete(l.pointerId);break;case"gotpointercapture":case"lostpointercapture":ol.delete(l.pointerId)}}function jl(V,l,W,U,Z,R){return null===V||V.nativeEvent!==R?(V={blockedOn:l,domEventName:W,eventSystemFlags:U,nativeEvent:R,targetContainers:[Z]},null!==l&&(null!==(l=bZ(l))&&sl(l)),V):(V.eventSystemFlags|=U,l=V.targetContainers,null!==Z&&-1===l.indexOf(Z)&&l.push(Z),V)}function Bl(V){var l=pZ(V.target);if(null!==l){var W=OV(l);if(null!==W)if(13===(l=W.tag)){if(null!==(l=LV(W)))return V.blockedOn=l,void Gl(V.priority,(function(){Yl(W)}))}else if(3===l&&W.stateNode.current.memoizedState.isDehydrated)return void(V.blockedOn=3===W.tag?W.stateNode.containerInfo:null)}V.blockedOn=null}function Dl(V){if(null!==V.blockedOn)return!1;for(var l=V.targetContainers;0<l.length;){var W=Al(V.domEventName,V.eventSystemFlags,l[0],V.nativeEvent);if(null!==W)return null!==(l=bZ(W))&&sl(l),V.blockedOn=W,!1;var U=new(W=V.nativeEvent).constructor(W.type,W);EV=U,W.target.dispatchEvent(U),EV=null,l.shift()}return!0}function Cl(V,l,W){Dl(V)&&W.delete(l)}function Hl(){Xl=!1,null!==xl&&Dl(xl)&&(xl=null),null!==rl&&Dl(rl)&&(rl=null),null!==Ql&&Dl(Ql)&&(Ql=null),zl.forEach(Cl),ol.forEach(Cl)}function Il(V,W){V.blockedOn===W&&(V.blockedOn=null,Xl||(Xl=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,Hl)))}function Ol(V){function l(l){return Il(l,V)}if(0<il.length){Il(il[0],V);for(var W=1;W<il.length;W++){var U=il[W];U.blockedOn===V&&(U.blockedOn=null)}}for(null!==xl&&Il(xl,V),null!==rl&&Il(rl,V),null!==Ql&&Il(Ql,V),zl.forEach(l),ol.forEach(l),W=0;W<ul.length;W++)(U=ul[W]).blockedOn===V&&(U.blockedOn=null);for(;0<ul.length&&null===(W=ul[0]).blockedOn;)Bl(W),null===W.blockedOn&&ul.shift()}var Ll=E.ReactCurrentBatchConfig,Kl=!0;function gl(V,l,W,U){var Z=Sl,R=Ll.transition;Ll.transition=null;try{Sl=1,fl(V,l,W,U)}finally{Sl=Z,Ll.transition=R}}function vl(V,l,W,U){var Z=Sl,R=Ll.transition;Ll.transition=null;try{Sl=4,fl(V,l,W,U)}finally{Sl=Z,Ll.transition=R}}function fl(V,l,W,U){if(Kl){var Z=Al(V,l,W,U);if(null===Z)LU(V,l,U,Pl,W),yl(V,U);else if(function(V,l,W,U,Z){switch(l){case"focusin":return xl=jl(xl,V,l,W,U,Z),!0;case"dragenter":return rl=jl(rl,V,l,W,U,Z),!0;case"mouseover":return Ql=jl(Ql,V,l,W,U,Z),!0;case"pointerover":var R=Z.pointerId;return zl.set(R,jl(zl.get(R)||null,V,l,W,U,Z)),!0;case"gotpointercapture":return R=Z.pointerId,ol.set(R,jl(ol.get(R)||null,V,l,W,U,Z)),!0}return!1}(Z,V,l,W,U))U.stopPropagation();else if(yl(V,U),4&l&&-1<wl.indexOf(V)){for(;null!==Z;){var R=bZ(Z);if(null!==R&&hl(R),null===(R=Al(V,l,W,U))&&LU(V,l,U,Pl,W),R===Z)break;Z=R}null!==Z&&U.stopPropagation()}else LU(V,l,U,null,W)}}var Pl=null;function Al(V,l,W,U){if(Pl=null,null!==(V=pZ(V=hV(U))))if(null===(l=OV(V)))V=null;else if(13===(W=l.tag)){if(null!==(V=LV(l)))return V;V=null}else if(3===W){if(l.stateNode.current.memoizedState.isDehydrated)return 3===l.tag?l.stateNode.containerInfo:null;V=null}else l!==V&&(V=null);return Pl=V,null}function ql(V){switch(V){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch($V()){case Vl:return 1;case ll:return 4;case Wl:case Ul:return 16;case Zl:return 536870912;default:return 16}default:return 16}}var _l=null,$l=null,VW=null;function lW(){if(VW)return VW;var V,l,W=$l,U=W.length,Z="value"in _l?_l.value:_l.textContent,R=Z.length;for(V=0;V<U&&W[V]===Z[V];V++);var d=U-V;for(l=1;l<=d&&W[U-l]===Z[R-l];l++);return VW=Z.slice(V,1<l?1-l:void 0)}function WW(V){var l=V.keyCode;return"charCode"in V?0===(V=V.charCode)&&13===l&&(V=13):V=l,10===V&&(V=13),32<=V||13===V?V:0}function UW(){return!0}function ZW(){return!1}function RW(V){function l(l,W,U,Z,R){for(var d in this._reactName=l,this._targetInst=U,this.type=W,this.nativeEvent=Z,this.target=R,this.currentTarget=null,V)V.hasOwnProperty(d)&&(l=V[d],this[d]=l?l(Z):Z[d]);return this.isDefaultPrevented=(null!=Z.defaultPrevented?Z.defaultPrevented:!1===Z.returnValue)?UW:ZW,this.isPropagationStopped=ZW,this}return B(l.prototype,{preventDefault:function(){this.defaultPrevented=!0;var V=this.nativeEvent;V&&(V.preventDefault?V.preventDefault():"unknown"!=typeof V.returnValue&&(V.returnValue=!1),this.isDefaultPrevented=UW)},stopPropagation:function(){var V=this.nativeEvent;V&&(V.stopPropagation?V.stopPropagation():"unknown"!=typeof V.cancelBubble&&(V.cancelBubble=!0),this.isPropagationStopped=UW)},persist:function(){},isPersistent:UW}),l}var dW,NW,FW,TW={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(V){return V.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},aW=RW(TW),eW=B({},TW,{view:0,detail:0}),tW=RW(eW),nW=B({},eW,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:JW,button:0,buttons:0,relatedTarget:function(V){return void 0===V.relatedTarget?V.fromElement===V.srcElement?V.toElement:V.fromElement:V.relatedTarget},movementX:function(V){return"movementX"in V?V.movementX:(V!==FW&&(FW&&"mousemove"===V.type?(dW=V.screenX-FW.screenX,NW=V.screenY-FW.screenY):NW=dW=0,FW=V),dW)},movementY:function(V){return"movementY"in V?V.movementY:NW}}),MW=RW(nW),kW=RW(B({},nW,{dataTransfer:0})),mW=RW(B({},eW,{relatedTarget:0})),cW=RW(B({},TW,{animationName:0,elapsedTime:0,pseudoElement:0})),pW=B({},TW,{clipboardData:function(V){return"clipboardData"in V?V.clipboardData:window.clipboardData}}),bW=RW(pW),SW=RW(B({},TW,{data:0})),EW={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hW={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},sW={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function YW(V){var l=this.nativeEvent;return l.getModifierState?l.getModifierState(V):!!(V=sW[V])&&!!l[V]}function JW(){return YW}var GW=B({},eW,{key:function(V){if(V.key){var l=EW[V.key]||V.key;if("Unidentified"!==l)return l}return"keypress"===V.type?13===(V=WW(V))?"Enter":String.fromCharCode(V):"keydown"===V.type||"keyup"===V.type?hW[V.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:JW,charCode:function(V){return"keypress"===V.type?WW(V):0},keyCode:function(V){return"keydown"===V.type||"keyup"===V.type?V.keyCode:0},which:function(V){return"keypress"===V.type?WW(V):"keydown"===V.type||"keyup"===V.type?V.keyCode:0}}),XW=RW(GW),iW=RW(B({},nW,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),xW=RW(B({},eW,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:JW})),rW=RW(B({},TW,{propertyName:0,elapsedTime:0,pseudoElement:0})),QW=B({},nW,{deltaX:function(V){return"deltaX"in V?V.deltaX:"wheelDeltaX"in V?-V.wheelDeltaX:0},deltaY:function(V){return"deltaY"in V?V.deltaY:"wheelDeltaY"in V?-V.wheelDeltaY:"wheelDelta"in V?-V.wheelDelta:0},deltaZ:0,deltaMode:0}),zW=RW(QW),oW=[9,13,27,32],uW=F&&"CompositionEvent"in window,wW=null;F&&"documentMode"in document&&(wW=document.documentMode);var yW=F&&"TextEvent"in window&&!wW,jW=F&&(!uW||wW&&8<wW&&11>=wW),BW=String.fromCharCode(32),DW=!1;function CW(V,l){switch(V){case"keyup":return-1!==oW.indexOf(l.keyCode);case"keydown":return 229!==l.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function HW(V){return"object"==typeof(V=V.detail)&&"data"in V?V.data:null}var IW=!1;var OW={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function LW(V){var l=V&&V.nodeName&&V.nodeName.toLowerCase();return"input"===l?!!OW[V.type]:"textarea"===l}function KW(V,l,W,U){XV(U),0<(l=gU(l,"onChange")).length&&(W=new aW("onChange","change",null,W,U),V.push({event:W,listeners:l}))}var gW=null,vW=null;function fW(V){BU(V,0)}function PW(V){if(f(SZ(V)))return V}function AW(V,l){if("change"===V)return l}var qW=!1;if(F){var _W;if(F){var $W="oninput"in document;if(!$W){var VU=document.createElement("div");VU.setAttribute("oninput","return;"),$W="function"==typeof VU.oninput}_W=$W}else _W=!1;qW=_W&&(!document.documentMode||9<document.documentMode)}function lU(){gW&&(gW.detachEvent("onpropertychange",WU),vW=gW=null)}function WU(V){if("value"===V.propertyName&&PW(vW)){var l=[];KW(l,vW,V,hV(V)),zV(fW,l)}}function UU(V,l,W){"focusin"===V?(lU(),vW=W,(gW=l).attachEvent("onpropertychange",WU)):"focusout"===V&&lU()}function ZU(V){if("selectionchange"===V||"keyup"===V||"keydown"===V)return PW(vW)}function RU(V,l){if("click"===V)return PW(l)}function dU(V,l){if("input"===V||"change"===V)return PW(l)}var NU="function"==typeof Object.is?Object.is:function(V,l){return V===l&&(0!==V||1/V==1/l)||V!=V&&l!=l};function FU(V,l){if(NU(V,l))return!0;if("object"!=typeof V||null===V||"object"!=typeof l||null===l)return!1;var W=Object.keys(V),U=Object.keys(l);if(W.length!==U.length)return!1;for(U=0;U<W.length;U++){var Z=W[U];if(!a.call(l,Z)||!NU(V[Z],l[Z]))return!1}return!0}function TU(V){for(;V&&V.firstChild;)V=V.firstChild;return V}function aU(V,l){var W,U=TU(V);for(V=0;U;){if(3===U.nodeType){if(W=V+U.textContent.length,V<=l&&W>=l)return{node:U,offset:l-V};V=W}V:{for(;U;){if(U.nextSibling){U=U.nextSibling;break V}U=U.parentNode}U=void 0}U=TU(U)}}function eU(V,l){return!(!V||!l)&&(V===l||(!V||3!==V.nodeType)&&(l&&3===l.nodeType?eU(V,l.parentNode):"contains"in V?V.contains(l):!!V.compareDocumentPosition&&!!(16&V.compareDocumentPosition(l))))}function tU(){for(var V=window,l=P();l instanceof V.HTMLIFrameElement;){try{var W="string"==typeof l.contentWindow.location.href}catch(V){W=!1}if(!W)break;l=P((V=l.contentWindow).document)}return l}function nU(V){var l=V&&V.nodeName&&V.nodeName.toLowerCase();return l&&("input"===l&&("text"===V.type||"search"===V.type||"tel"===V.type||"url"===V.type||"password"===V.type)||"textarea"===l||"true"===V.contentEditable)}function MU(V){var l=tU(),W=V.focusedElem,U=V.selectionRange;if(l!==W&&W&&W.ownerDocument&&eU(W.ownerDocument.documentElement,W)){if(null!==U&&nU(W))if(l=U.start,void 0===(V=U.end)&&(V=l),"selectionStart"in W)W.selectionStart=l,W.selectionEnd=Math.min(V,W.value.length);else if((V=(l=W.ownerDocument||document)&&l.defaultView||window).getSelection){V=V.getSelection();var Z=W.textContent.length,R=Math.min(U.start,Z);U=void 0===U.end?R:Math.min(U.end,Z),!V.extend&&R>U&&(Z=U,U=R,R=Z),Z=aU(W,R);var d=aU(W,U);Z&&d&&(1!==V.rangeCount||V.anchorNode!==Z.node||V.anchorOffset!==Z.offset||V.focusNode!==d.node||V.focusOffset!==d.offset)&&((l=l.createRange()).setStart(Z.node,Z.offset),V.removeAllRanges(),R>U?(V.addRange(l),V.extend(d.node,d.offset)):(l.setEnd(d.node,d.offset),V.addRange(l)))}for(l=[],V=W;V=V.parentNode;)1===V.nodeType&&l.push({element:V,left:V.scrollLeft,top:V.scrollTop});for("function"==typeof W.focus&&W.focus(),W=0;W<l.length;W++)(V=l[W]).element.scrollLeft=V.left,V.element.scrollTop=V.top}}var kU=F&&"documentMode"in document&&11>=document.documentMode,mU=null,cU=null,pU=null,bU=!1;function SU(V,l,W){var U=W.window===W?W.document:9===W.nodeType?W:W.ownerDocument;bU||null==mU||mU!==P(U)||("selectionStart"in(U=mU)&&nU(U)?U={start:U.selectionStart,end:U.selectionEnd}:U={anchorNode:(U=(U.ownerDocument&&U.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:U.anchorOffset,focusNode:U.focusNode,focusOffset:U.focusOffset},pU&&FU(pU,U)||(pU=U,0<(U=gU(cU,"onSelect")).length&&(l=new aW("onSelect","select",null,l,W),V.push({event:l,listeners:U}),l.target=mU)))}function EU(V,l){var W={};return W[V.toLowerCase()]=l.toLowerCase(),W["Webkit"+V]="webkit"+l,W["Moz"+V]="moz"+l,W}var hU={animationend:EU("Animation","AnimationEnd"),animationiteration:EU("Animation","AnimationIteration"),animationstart:EU("Animation","AnimationStart"),transitionend:EU("Transition","TransitionEnd")},sU={},YU={};function JU(V){if(sU[V])return sU[V];if(!hU[V])return V;var l,W=hU[V];for(l in W)if(W.hasOwnProperty(l)&&l in YU)return sU[V]=W[l];return V}F&&(YU=document.createElement("div").style,"AnimationEvent"in window||(delete hU.animationend.animation,delete hU.animationiteration.animation,delete hU.animationstart.animation),"TransitionEvent"in window||delete hU.transitionend.transition);var GU=JU("animationend"),XU=JU("animationiteration"),iU=JU("animationstart"),xU=JU("transitionend"),rU=new Map,QU="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function zU(V,l){rU.set(V,l),R(l,[V])}for(var oU=0;oU<QU.length;oU++){var uU=QU[oU];zU(uU.toLowerCase(),"on"+(uU[0].toUpperCase()+uU.slice(1)))}zU(GU,"onAnimationEnd"),zU(XU,"onAnimationIteration"),zU(iU,"onAnimationStart"),zU("dblclick","onDoubleClick"),zU("focusin","onFocus"),zU("focusout","onBlur"),zU(xU,"onTransitionEnd"),N("onMouseEnter",["mouseout","mouseover"]),N("onMouseLeave",["mouseout","mouseover"]),N("onPointerEnter",["pointerout","pointerover"]),N("onPointerLeave",["pointerout","pointerover"]),R("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),R("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),R("onBeforeInput",["compositionend","keypress","textInput","paste"]),R("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),R("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),R("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var wU="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),yU=new Set("cancel close invalid load scroll toggle".split(" ").concat(wU));function jU(V,l,U){var Z=V.type||"unknown-event";V.currentTarget=U,function(V,l,U,Z,R,d,N,F,T){if(IV.apply(this,arguments),jV){if(!jV)throw Error(W(198));var a=BV;jV=!1,BV=null,DV||(DV=!0,CV=a)}}(Z,l,void 0,V),V.currentTarget=null}function BU(V,l){l=!!(4&l);for(var W=0;W<V.length;W++){var U=V[W],Z=U.event;U=U.listeners;V:{var R=void 0;if(l)for(var d=U.length-1;0<=d;d--){var N=U[d],F=N.instance,T=N.currentTarget;if(N=N.listener,F!==R&&Z.isPropagationStopped())break V;jU(Z,N,T),R=F}else for(d=0;d<U.length;d++){if(F=(N=U[d]).instance,T=N.currentTarget,N=N.listener,F!==R&&Z.isPropagationStopped())break V;jU(Z,N,T),R=F}}}if(DV)throw V=CV,DV=!1,CV=null,V}function DU(V,l){var W=l[kZ];void 0===W&&(W=l[kZ]=new Set);var U=V+"__bubble";W.has(U)||(OU(l,V,2,!1),W.add(U))}function CU(V,l,W){var U=0;l&&(U|=4),OU(W,V,U,l)}var HU="_reactListening"+Math.random().toString(36).slice(2);function IU(V){if(!V[HU]){V[HU]=!0,U.forEach((function(l){"selectionchange"!==l&&(yU.has(l)||CU(l,!1,V),CU(l,!0,V))}));var l=9===V.nodeType?V:V.ownerDocument;null===l||l[HU]||(l[HU]=!0,CU("selectionchange",!1,l))}}function OU(V,l,W,U){switch(ql(l)){case 1:var Z=gl;break;case 4:Z=vl;break;default:Z=fl}W=Z.bind(null,l,W,V),Z=void 0,!uV||"touchstart"!==l&&"touchmove"!==l&&"wheel"!==l||(Z=!0),U?void 0!==Z?V.addEventListener(l,W,{capture:!0,passive:Z}):V.addEventListener(l,W,!0):void 0!==Z?V.addEventListener(l,W,{passive:Z}):V.addEventListener(l,W,!1)}function LU(V,l,W,U,Z){var R=U;if(!(1&l||2&l||null===U))V:for(;;){if(null===U)return;var d=U.tag;if(3===d||4===d){var N=U.stateNode.containerInfo;if(N===Z||8===N.nodeType&&N.parentNode===Z)break;if(4===d)for(d=U.return;null!==d;){var F=d.tag;if((3===F||4===F)&&((F=d.stateNode.containerInfo)===Z||8===F.nodeType&&F.parentNode===Z))return;d=d.return}for(;null!==N;){if(null===(d=pZ(N)))return;if(5===(F=d.tag)||6===F){U=R=d;continue V}N=N.parentNode}}U=U.return}zV((function(){var U=R,Z=hV(W),d=[];V:{var N=rU.get(V);if(void 0!==N){var F=aW,T=V;switch(V){case"keypress":if(0===WW(W))break V;case"keydown":case"keyup":F=XW;break;case"focusin":T="focus",F=mW;break;case"focusout":T="blur",F=mW;break;case"beforeblur":case"afterblur":F=mW;break;case"click":if(2===W.button)break V;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":F=MW;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":F=kW;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":F=xW;break;case GU:case XU:case iU:F=cW;break;case xU:F=rW;break;case"scroll":F=tW;break;case"wheel":F=zW;break;case"copy":case"cut":case"paste":F=bW;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":F=iW}var a=!!(4&l),e=!a&&"scroll"===V,t=a?null!==N?N+"Capture":null:N;a=[];for(var n,M=U;null!==M;){var k=(n=M).stateNode;if(5===n.tag&&null!==k&&(n=k,null!==t&&(null!=(k=oV(M,t))&&a.push(KU(M,k,n)))),e)break;M=M.return}0<a.length&&(N=new F(N,T,null,W,Z),d.push({event:N,listeners:a}))}}if(!(7&l)){if(F="mouseout"===V||"pointerout"===V,(!(N="mouseover"===V||"pointerover"===V)||W===EV||!(T=W.relatedTarget||W.fromElement)||!pZ(T)&&!T[MZ])&&(F||N)&&(N=Z.window===Z?Z:(N=Z.ownerDocument)?N.defaultView||N.parentWindow:window,F?(F=U,null!==(T=(T=W.relatedTarget||W.toElement)?pZ(T):null)&&(T!==(e=OV(T))||5!==T.tag&&6!==T.tag)&&(T=null)):(F=null,T=U),F!==T)){if(a=MW,k="onMouseLeave",t="onMouseEnter",M="mouse","pointerout"!==V&&"pointerover"!==V||(a=iW,k="onPointerLeave",t="onPointerEnter",M="pointer"),e=null==F?N:SZ(F),n=null==T?N:SZ(T),(N=new a(k,M+"leave",F,W,Z)).target=e,N.relatedTarget=n,k=null,pZ(Z)===U&&((a=new a(t,M+"enter",T,W,Z)).target=n,a.relatedTarget=e,k=a),e=k,F&&T)V:{for(t=T,M=0,n=a=F;n;n=vU(n))M++;for(n=0,k=t;k;k=vU(k))n++;for(;0<M-n;)a=vU(a),M--;for(;0<n-M;)t=vU(t),n--;for(;M--;){if(a===t||null!==t&&a===t.alternate)break V;a=vU(a),t=vU(t)}a=null}else a=null;null!==F&&fU(d,N,F,a,!1),null!==T&&null!==e&&fU(d,e,T,a,!0)}if("select"===(F=(N=U?SZ(U):window).nodeName&&N.nodeName.toLowerCase())||"input"===F&&"file"===N.type)var m=AW;else if(LW(N))if(qW)m=dU;else{m=ZU;var c=UU}else(F=N.nodeName)&&"input"===F.toLowerCase()&&("checkbox"===N.type||"radio"===N.type)&&(m=RU);switch(m&&(m=m(V,U))?KW(d,m,W,Z):(c&&c(V,N,U),"focusout"===V&&(c=N._wrapperState)&&c.controlled&&"number"===N.type&&lV(N,"number",N.value)),c=U?SZ(U):window,V){case"focusin":(LW(c)||"true"===c.contentEditable)&&(mU=c,cU=U,pU=null);break;case"focusout":pU=cU=mU=null;break;case"mousedown":bU=!0;break;case"contextmenu":case"mouseup":case"dragend":bU=!1,SU(d,W,Z);break;case"selectionchange":if(kU)break;case"keydown":case"keyup":SU(d,W,Z)}var p;if(uW)V:{switch(V){case"compositionstart":var b="onCompositionStart";break V;case"compositionend":b="onCompositionEnd";break V;case"compositionupdate":b="onCompositionUpdate";break V}b=void 0}else IW?CW(V,W)&&(b="onCompositionEnd"):"keydown"===V&&229===W.keyCode&&(b="onCompositionStart");b&&(jW&&"ko"!==W.locale&&(IW||"onCompositionStart"!==b?"onCompositionEnd"===b&&IW&&(p=lW()):($l="value"in(_l=Z)?_l.value:_l.textContent,IW=!0)),0<(c=gU(U,b)).length&&(b=new SW(b,V,null,W,Z),d.push({event:b,listeners:c}),p?b.data=p:null!==(p=HW(W))&&(b.data=p))),(p=yW?function(V,l){switch(V){case"compositionend":return HW(l);case"keypress":return 32!==l.which?null:(DW=!0,BW);case"textInput":return(V=l.data)===BW&&DW?null:V;default:return null}}(V,W):function(V,l){if(IW)return"compositionend"===V||!uW&&CW(V,l)?(V=lW(),VW=$l=_l=null,IW=!1,V):null;switch(V){case"paste":default:return null;case"keypress":if(!(l.ctrlKey||l.altKey||l.metaKey)||l.ctrlKey&&l.altKey){if(l.char&&1<l.char.length)return l.char;if(l.which)return String.fromCharCode(l.which)}return null;case"compositionend":return jW&&"ko"!==l.locale?null:l.data}}(V,W))&&(0<(U=gU(U,"onBeforeInput")).length&&(Z=new SW("onBeforeInput","beforeinput",null,W,Z),d.push({event:Z,listeners:U}),Z.data=p))}BU(d,l)}))}function KU(V,l,W){return{instance:V,listener:l,currentTarget:W}}function gU(V,l){for(var W=l+"Capture",U=[];null!==V;){var Z=V,R=Z.stateNode;5===Z.tag&&null!==R&&(Z=R,null!=(R=oV(V,W))&&U.unshift(KU(V,R,Z)),null!=(R=oV(V,l))&&U.push(KU(V,R,Z))),V=V.return}return U}function vU(V){if(null===V)return null;do{V=V.return}while(V&&5!==V.tag);return V||null}function fU(V,l,W,U,Z){for(var R=l._reactName,d=[];null!==W&&W!==U;){var N=W,F=N.alternate,T=N.stateNode;if(null!==F&&F===U)break;5===N.tag&&null!==T&&(N=T,Z?null!=(F=oV(W,R))&&d.unshift(KU(W,F,N)):Z||null!=(F=oV(W,R))&&d.push(KU(W,F,N))),W=W.return}0!==d.length&&V.push({event:l,listeners:d})}var PU=/\r\n?/g,AU=/\u0000|\uFFFD/g;function qU(V){return("string"==typeof V?V:""+V).replace(PU,"\n").replace(AU,"")}function _U(V,l,U){if(l=qU(l),qU(V)!==l&&U)throw Error(W(425))}function $U(){}var VZ=null,lZ=null;function WZ(V,l){return"textarea"===V||"noscript"===V||"string"==typeof l.children||"number"==typeof l.children||"object"==typeof l.dangerouslySetInnerHTML&&null!==l.dangerouslySetInnerHTML&&null!=l.dangerouslySetInnerHTML.__html}var UZ="function"==typeof setTimeout?setTimeout:void 0,ZZ="function"==typeof clearTimeout?clearTimeout:void 0,RZ="function"==typeof Promise?Promise:void 0,dZ="function"==typeof queueMicrotask?queueMicrotask:void 0!==RZ?function(V){return RZ.resolve(null).then(V).catch(NZ)}:UZ;function NZ(V){setTimeout((function(){throw V}))}function FZ(V,l){var W=l,U=0;do{var Z=W.nextSibling;if(V.removeChild(W),Z&&8===Z.nodeType)if("/$"===(W=Z.data)){if(0===U)return V.removeChild(Z),void Ol(l);U--}else"$"!==W&&"$?"!==W&&"$!"!==W||U++;W=Z}while(W);Ol(l)}function TZ(V){for(;null!=V;V=V.nextSibling){var l=V.nodeType;if(1===l||3===l)break;if(8===l){if("$"===(l=V.data)||"$!"===l||"$?"===l)break;if("/$"===l)return null}}return V}function aZ(V){V=V.previousSibling;for(var l=0;V;){if(8===V.nodeType){var W=V.data;if("$"===W||"$!"===W||"$?"===W){if(0===l)return V;l--}else"/$"===W&&l++}V=V.previousSibling}return null}var eZ=Math.random().toString(36).slice(2),tZ="__reactFiber$"+eZ,nZ="__reactProps$"+eZ,MZ="__reactContainer$"+eZ,kZ="__reactEvents$"+eZ,mZ="__reactListeners$"+eZ,cZ="__reactHandles$"+eZ;function pZ(V){var l=V[tZ];if(l)return l;for(var W=V.parentNode;W;){if(l=W[MZ]||W[tZ]){if(W=l.alternate,null!==l.child||null!==W&&null!==W.child)for(V=aZ(V);null!==V;){if(W=V[tZ])return W;V=aZ(V)}return l}W=(V=W).parentNode}return null}function bZ(V){return!(V=V[tZ]||V[MZ])||5!==V.tag&&6!==V.tag&&13!==V.tag&&3!==V.tag?null:V}function SZ(V){if(5===V.tag||6===V.tag)return V.stateNode;throw Error(W(33))}function EZ(V){return V[nZ]||null}var hZ=[],sZ=-1;function YZ(V){return{current:V}}function JZ(V){0>sZ||(V.current=hZ[sZ],hZ[sZ]=null,sZ--)}function GZ(V,l){sZ++,hZ[sZ]=V.current,V.current=l}var XZ={},iZ=YZ(XZ),xZ=YZ(!1),rZ=XZ;function QZ(V,l){var W=V.type.contextTypes;if(!W)return XZ;var U=V.stateNode;if(U&&U.__reactInternalMemoizedUnmaskedChildContext===l)return U.__reactInternalMemoizedMaskedChildContext;var Z,R={};for(Z in W)R[Z]=l[Z];return U&&((V=V.stateNode).__reactInternalMemoizedUnmaskedChildContext=l,V.__reactInternalMemoizedMaskedChildContext=R),R}function zZ(V){return null!=(V=V.childContextTypes)}function oZ(){JZ(xZ),JZ(iZ)}function uZ(V,l,U){if(iZ.current!==XZ)throw Error(W(168));GZ(iZ,l),GZ(xZ,U)}function wZ(V,l,U){var Z=V.stateNode;if(l=l.childContextTypes,"function"!=typeof Z.getChildContext)return U;for(var R in Z=Z.getChildContext())if(!(R in l))throw Error(W(108,L(V)||"Unknown",R));return B({},U,Z)}function yZ(V){return V=(V=V.stateNode)&&V.__reactInternalMemoizedMergedChildContext||XZ,rZ=iZ.current,GZ(iZ,V),GZ(xZ,xZ.current),!0}function jZ(V,l,U){var Z=V.stateNode;if(!Z)throw Error(W(169));U?(V=wZ(V,l,rZ),Z.__reactInternalMemoizedMergedChildContext=V,JZ(xZ),JZ(iZ),GZ(iZ,V)):JZ(xZ),GZ(xZ,U)}var BZ=null,DZ=!1,CZ=!1;function HZ(V){null===BZ?BZ=[V]:BZ.push(V)}function IZ(){if(!CZ&&null!==BZ){CZ=!0;var V=0,l=Sl;try{var W=BZ;for(Sl=1;V<W.length;V++){var U=W[V];do{U=U(!0)}while(null!==U)}BZ=null,DZ=!1}catch(l){throw null!==BZ&&(BZ=BZ.slice(V+1)),fV(Vl,IZ),l}finally{Sl=l,CZ=!1}}return null}var OZ=[],LZ=0,KZ=null,gZ=0,vZ=[],fZ=0,PZ=null,AZ=1,qZ="";function _Z(V,l){OZ[LZ++]=gZ,OZ[LZ++]=KZ,KZ=V,gZ=l}function $Z(V,l,W){vZ[fZ++]=AZ,vZ[fZ++]=qZ,vZ[fZ++]=PZ,PZ=V;var U=AZ;V=qZ;var Z=32-Nl(U)-1;U&=~(1<<Z),W+=1;var R=32-Nl(l)+Z;if(30<R){var d=Z-Z%5;R=(U&(1<<d)-1).toString(32),U>>=d,Z-=d,AZ=1<<32-Nl(l)+Z|W<<Z|U,qZ=R+V}else AZ=1<<R|W<<Z|U,qZ=V}function VR(V){null!==V.return&&(_Z(V,1),$Z(V,1,0))}function lR(V){for(;V===KZ;)KZ=OZ[--LZ],OZ[LZ]=null,gZ=OZ[--LZ],OZ[LZ]=null;for(;V===PZ;)PZ=vZ[--fZ],vZ[fZ]=null,qZ=vZ[--fZ],vZ[fZ]=null,AZ=vZ[--fZ],vZ[fZ]=null}var WR=null,UR=null,ZR=!1,RR=null;function dR(V,l){var W=rT(5,null,null,0);W.elementType="DELETED",W.stateNode=l,W.return=V,null===(l=V.deletions)?(V.deletions=[W],V.flags|=16):l.push(W)}function NR(V,l){switch(V.tag){case 5:var W=V.type;return null!==(l=1!==l.nodeType||W.toLowerCase()!==l.nodeName.toLowerCase()?null:l)&&(V.stateNode=l,WR=V,UR=TZ(l.firstChild),!0);case 6:return null!==(l=""===V.pendingProps||3!==l.nodeType?null:l)&&(V.stateNode=l,WR=V,UR=null,!0);case 13:return null!==(l=8!==l.nodeType?null:l)&&(W=null!==PZ?{id:AZ,overflow:qZ}:null,V.memoizedState={dehydrated:l,treeContext:W,retryLane:1073741824},(W=rT(18,null,null,0)).stateNode=l,W.return=V,V.child=W,WR=V,UR=null,!0);default:return!1}}function FR(V){return!(!(1&V.mode)||128&V.flags)}function TR(V){if(ZR){var l=UR;if(l){var U=l;if(!NR(V,l)){if(FR(V))throw Error(W(418));l=TZ(U.nextSibling);var Z=WR;l&&NR(V,l)?dR(Z,U):(V.flags=-4097&V.flags|2,ZR=!1,WR=V)}}else{if(FR(V))throw Error(W(418));V.flags=-4097&V.flags|2,ZR=!1,WR=V}}}function aR(V){for(V=V.return;null!==V&&5!==V.tag&&3!==V.tag&&13!==V.tag;)V=V.return;WR=V}function eR(V){if(V!==WR)return!1;if(!ZR)return aR(V),ZR=!0,!1;var l;if((l=3!==V.tag)&&!(l=5!==V.tag)&&(l="head"!==(l=V.type)&&"body"!==l&&!WZ(V.type,V.memoizedProps)),l&&(l=UR)){if(FR(V))throw tR(),Error(W(418));for(;l;)dR(V,l),l=TZ(l.nextSibling)}if(aR(V),13===V.tag){if(!(V=null!==(V=V.memoizedState)?V.dehydrated:null))throw Error(W(317));V:{for(V=V.nextSibling,l=0;V;){if(8===V.nodeType){var U=V.data;if("/$"===U){if(0===l){UR=TZ(V.nextSibling);break V}l--}else"$"!==U&&"$!"!==U&&"$?"!==U||l++}V=V.nextSibling}UR=null}}else UR=WR?TZ(V.stateNode.nextSibling):null;return!0}function tR(){for(var V=UR;V;)V=TZ(V.nextSibling)}function nR(){UR=WR=null,ZR=!1}function MR(V){null===RR?RR=[V]:RR.push(V)}var kR=E.ReactCurrentBatchConfig;function mR(V,l,U){if(null!==(V=U.ref)&&"function"!=typeof V&&"object"!=typeof V){if(U._owner){if(U=U._owner){if(1!==U.tag)throw Error(W(309));var Z=U.stateNode}if(!Z)throw Error(W(147,V));var R=Z,d=""+V;return null!==l&&null!==l.ref&&"function"==typeof l.ref&&l.ref._stringRef===d?l.ref:(l=function(V){var l=R.refs;null===V?delete l[d]:l[d]=V},l._stringRef=d,l)}if("string"!=typeof V)throw Error(W(284));if(!U._owner)throw Error(W(290,V))}return V}function cR(V,l){throw V=Object.prototype.toString.call(l),Error(W(31,"[object Object]"===V?"object with keys {"+Object.keys(l).join(", ")+"}":V))}function pR(V){return(0,V._init)(V._payload)}function bR(V){function l(l,W){if(V){var U=l.deletions;null===U?(l.deletions=[W],l.flags|=16):U.push(W)}}function U(W,U){if(!V)return null;for(;null!==U;)l(W,U),U=U.sibling;return null}function Z(V,l){for(V=new Map;null!==l;)null!==l.key?V.set(l.key,l):V.set(l.index,l),l=l.sibling;return V}function R(V,l){return(V=zT(V,l)).index=0,V.sibling=null,V}function d(l,W,U){return l.index=U,V?null!==(U=l.alternate)?(U=U.index)<W?(l.flags|=2,W):U:(l.flags|=2,W):(l.flags|=1048576,W)}function N(l){return V&&null===l.alternate&&(l.flags|=2),l}function F(V,l,W,U){return null===l||6!==l.tag?((l=yT(W,V.mode,U)).return=V,l):((l=R(l,W)).return=V,l)}function T(V,l,W,U){var Z=W.type;return Z===Y?e(V,l,W.props.children,U,W.key):null!==l&&(l.elementType===Z||"object"==typeof Z&&null!==Z&&Z.$$typeof===o&&pR(Z)===l.type)?((U=R(l,W.props)).ref=mR(V,l,W),U.return=V,U):((U=oT(W.type,W.key,W.props,null,V.mode,U)).ref=mR(V,l,W),U.return=V,U)}function a(V,l,W,U){return null===l||4!==l.tag||l.stateNode.containerInfo!==W.containerInfo||l.stateNode.implementation!==W.implementation?((l=jT(W,V.mode,U)).return=V,l):((l=R(l,W.children||[])).return=V,l)}function e(V,l,W,U,Z){return null===l||7!==l.tag?((l=uT(W,V.mode,U,Z)).return=V,l):((l=R(l,W)).return=V,l)}function t(V,l,W){if("string"==typeof l&&""!==l||"number"==typeof l)return(l=yT(""+l,V.mode,W)).return=V,l;if("object"==typeof l&&null!==l){switch(l.$$typeof){case h:return(W=oT(l.type,l.key,l.props,null,V.mode,W)).ref=mR(V,null,l),W.return=V,W;case s:return(l=jT(l,V.mode,W)).return=V,l;case o:return t(V,(0,l._init)(l._payload),W)}if(WV(l)||y(l))return(l=uT(l,V.mode,W,null)).return=V,l;cR(V,l)}return null}function n(V,l,W,U){var Z=null!==l?l.key:null;if("string"==typeof W&&""!==W||"number"==typeof W)return null!==Z?null:F(V,l,""+W,U);if("object"==typeof W&&null!==W){switch(W.$$typeof){case h:return W.key===Z?T(V,l,W,U):null;case s:return W.key===Z?a(V,l,W,U):null;case o:return n(V,l,(Z=W._init)(W._payload),U)}if(WV(W)||y(W))return null!==Z?null:e(V,l,W,U,null);cR(V,W)}return null}function M(V,l,W,U,Z){if("string"==typeof U&&""!==U||"number"==typeof U)return F(l,V=V.get(W)||null,""+U,Z);if("object"==typeof U&&null!==U){switch(U.$$typeof){case h:return T(l,V=V.get(null===U.key?W:U.key)||null,U,Z);case s:return a(l,V=V.get(null===U.key?W:U.key)||null,U,Z);case o:return M(V,l,W,(0,U._init)(U._payload),Z)}if(WV(U)||y(U))return e(l,V=V.get(W)||null,U,Z,null);cR(l,U)}return null}function k(W,R,N,F){for(var T=null,a=null,e=R,k=R=0,m=null;null!==e&&k<N.length;k++){e.index>k?(m=e,e=null):m=e.sibling;var c=n(W,e,N[k],F);if(null===c){null===e&&(e=m);break}V&&e&&null===c.alternate&&l(W,e),R=d(c,R,k),null===a?T=c:a.sibling=c,a=c,e=m}if(k===N.length)return U(W,e),ZR&&_Z(W,k),T;if(null===e){for(;k<N.length;k++)null!==(e=t(W,N[k],F))&&(R=d(e,R,k),null===a?T=e:a.sibling=e,a=e);return ZR&&_Z(W,k),T}for(e=Z(W,e);k<N.length;k++)null!==(m=M(e,W,k,N[k],F))&&(V&&null!==m.alternate&&e.delete(null===m.key?k:m.key),R=d(m,R,k),null===a?T=m:a.sibling=m,a=m);return V&&e.forEach((function(V){return l(W,V)})),ZR&&_Z(W,k),T}function m(R,N,F,T){var a=y(F);if("function"!=typeof a)throw Error(W(150));if(null==(F=a.call(F)))throw Error(W(151));for(var e=a=null,k=N,m=N=0,c=null,p=F.next();null!==k&&!p.done;m++,p=F.next()){k.index>m?(c=k,k=null):c=k.sibling;var b=n(R,k,p.value,T);if(null===b){null===k&&(k=c);break}V&&k&&null===b.alternate&&l(R,k),N=d(b,N,m),null===e?a=b:e.sibling=b,e=b,k=c}if(p.done)return U(R,k),ZR&&_Z(R,m),a;if(null===k){for(;!p.done;m++,p=F.next())null!==(p=t(R,p.value,T))&&(N=d(p,N,m),null===e?a=p:e.sibling=p,e=p);return ZR&&_Z(R,m),a}for(k=Z(R,k);!p.done;m++,p=F.next())null!==(p=M(k,R,m,p.value,T))&&(V&&null!==p.alternate&&k.delete(null===p.key?m:p.key),N=d(p,N,m),null===e?a=p:e.sibling=p,e=p);return V&&k.forEach((function(V){return l(R,V)})),ZR&&_Z(R,m),a}return function V(W,Z,d,F){if("object"==typeof d&&null!==d&&d.type===Y&&null===d.key&&(d=d.props.children),"object"==typeof d&&null!==d){switch(d.$$typeof){case h:V:{for(var T=d.key,a=Z;null!==a;){if(a.key===T){if((T=d.type)===Y){if(7===a.tag){U(W,a.sibling),(Z=R(a,d.props.children)).return=W,W=Z;break V}}else if(a.elementType===T||"object"==typeof T&&null!==T&&T.$$typeof===o&&pR(T)===a.type){U(W,a.sibling),(Z=R(a,d.props)).ref=mR(W,a,d),Z.return=W,W=Z;break V}U(W,a);break}l(W,a),a=a.sibling}d.type===Y?((Z=uT(d.props.children,W.mode,F,d.key)).return=W,W=Z):((F=oT(d.type,d.key,d.props,null,W.mode,F)).ref=mR(W,Z,d),F.return=W,W=F)}return N(W);case s:V:{for(a=d.key;null!==Z;){if(Z.key===a){if(4===Z.tag&&Z.stateNode.containerInfo===d.containerInfo&&Z.stateNode.implementation===d.implementation){U(W,Z.sibling),(Z=R(Z,d.children||[])).return=W,W=Z;break V}U(W,Z);break}l(W,Z),Z=Z.sibling}(Z=jT(d,W.mode,F)).return=W,W=Z}return N(W);case o:return V(W,Z,(a=d._init)(d._payload),F)}if(WV(d))return k(W,Z,d,F);if(y(d))return m(W,Z,d,F);cR(W,d)}return"string"==typeof d&&""!==d||"number"==typeof d?(d=""+d,null!==Z&&6===Z.tag?(U(W,Z.sibling),(Z=R(Z,d)).return=W,W=Z):(U(W,Z),(Z=yT(d,W.mode,F)).return=W,W=Z),N(W)):U(W,Z)}}var SR=bR(!0),ER=bR(!1),hR=YZ(null),sR=null,YR=null,JR=null;function GR(){JR=YR=sR=null}function XR(V){var l=hR.current;JZ(hR),V._currentValue=l}function iR(V,l,W){for(;null!==V;){var U=V.alternate;if((V.childLanes&l)!==l?(V.childLanes|=l,null!==U&&(U.childLanes|=l)):null!==U&&(U.childLanes&l)!==l&&(U.childLanes|=l),V===W)break;V=V.return}}function xR(V,l){sR=V,JR=YR=null,null!==(V=V.dependencies)&&null!==V.firstContext&&(!!(V.lanes&l)&&(pN=!0),V.firstContext=null)}function rR(V){var l=V._currentValue;if(JR!==V)if(V={context:V,memoizedValue:l,next:null},null===YR){if(null===sR)throw Error(W(308));YR=V,sR.dependencies={lanes:0,firstContext:V}}else YR=YR.next=V;return l}var QR=null;function zR(V){null===QR?QR=[V]:QR.push(V)}function oR(V,l,W,U){var Z=l.interleaved;return null===Z?(W.next=W,zR(l)):(W.next=Z.next,Z.next=W),l.interleaved=W,uR(V,U)}function uR(V,l){V.lanes|=l;var W=V.alternate;for(null!==W&&(W.lanes|=l),W=V,V=V.return;null!==V;)V.childLanes|=l,null!==(W=V.alternate)&&(W.childLanes|=l),W=V,V=V.return;return 3===W.tag?W.stateNode:null}var wR=!1;function yR(V){V.updateQueue={baseState:V.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function jR(V,l){V=V.updateQueue,l.updateQueue===V&&(l.updateQueue={baseState:V.baseState,firstBaseUpdate:V.firstBaseUpdate,lastBaseUpdate:V.lastBaseUpdate,shared:V.shared,effects:V.effects})}function BR(V,l){return{eventTime:V,lane:l,tag:0,payload:null,callback:null,next:null}}function DR(V,l,W){var U=V.updateQueue;if(null===U)return null;if(U=U.shared,2&XF){var Z=U.pending;return null===Z?l.next=l:(l.next=Z.next,Z.next=l),U.pending=l,uR(V,W)}return null===(Z=U.interleaved)?(l.next=l,zR(U)):(l.next=Z.next,Z.next=l),U.interleaved=l,uR(V,W)}function CR(V,l,W){if(null!==(l=l.updateQueue)&&(l=l.shared,4194240&W)){var U=l.lanes;W|=U&=V.pendingLanes,l.lanes=W,bl(V,W)}}function HR(V,l){var W=V.updateQueue,U=V.alternate;if(null!==U&&W===(U=U.updateQueue)){var Z=null,R=null;if(null!==(W=W.firstBaseUpdate)){do{var d={eventTime:W.eventTime,lane:W.lane,tag:W.tag,payload:W.payload,callback:W.callback,next:null};null===R?Z=R=d:R=R.next=d,W=W.next}while(null!==W);null===R?Z=R=l:R=R.next=l}else Z=R=l;return W={baseState:U.baseState,firstBaseUpdate:Z,lastBaseUpdate:R,shared:U.shared,effects:U.effects},void(V.updateQueue=W)}null===(V=W.lastBaseUpdate)?W.firstBaseUpdate=l:V.next=l,W.lastBaseUpdate=l}function IR(V,l,W,U){var Z=V.updateQueue;wR=!1;var R=Z.firstBaseUpdate,d=Z.lastBaseUpdate,N=Z.shared.pending;if(null!==N){Z.shared.pending=null;var F=N,T=F.next;F.next=null,null===d?R=T:d.next=T,d=F;var a=V.alternate;null!==a&&((N=(a=a.updateQueue).lastBaseUpdate)!==d&&(null===N?a.firstBaseUpdate=T:N.next=T,a.lastBaseUpdate=F))}if(null!==R){var e=Z.baseState;for(d=0,a=T=F=null,N=R;;){var t=N.lane,n=N.eventTime;if((U&t)===t){null!==a&&(a=a.next={eventTime:n,lane:0,tag:N.tag,payload:N.payload,callback:N.callback,next:null});V:{var M=V,k=N;switch(t=l,n=W,k.tag){case 1:if("function"==typeof(M=k.payload)){e=M.call(n,e,t);break V}e=M;break V;case 3:M.flags=-65537&M.flags|128;case 0:if(null==(t="function"==typeof(M=k.payload)?M.call(n,e,t):M))break V;e=B({},e,t);break V;case 2:wR=!0}}null!==N.callback&&0!==N.lane&&(V.flags|=64,null===(t=Z.effects)?Z.effects=[N]:t.push(N))}else n={eventTime:n,lane:t,tag:N.tag,payload:N.payload,callback:N.callback,next:null},null===a?(T=a=n,F=e):a=a.next=n,d|=t;if(null===(N=N.next)){if(null===(N=Z.shared.pending))break;N=(t=N).next,t.next=null,Z.lastBaseUpdate=t,Z.shared.pending=null}}if(null===a&&(F=e),Z.baseState=F,Z.firstBaseUpdate=T,Z.lastBaseUpdate=a,null!==(l=Z.shared.interleaved)){Z=l;do{d|=Z.lane,Z=Z.next}while(Z!==l)}else null===R&&(Z.shared.lanes=0);wF|=d,V.lanes=d,V.memoizedState=e}}function OR(V,l,U){if(V=l.effects,l.effects=null,null!==V)for(l=0;l<V.length;l++){var Z=V[l],R=Z.callback;if(null!==R){if(Z.callback=null,Z=U,"function"!=typeof R)throw Error(W(191,R));R.call(Z)}}}var LR={},KR=YZ(LR),gR=YZ(LR),vR=YZ(LR);function fR(V){if(V===LR)throw Error(W(174));return V}function PR(V,l){switch(GZ(vR,l),GZ(gR,V),GZ(KR,LR),V=l.nodeType){case 9:case 11:l=(l=l.documentElement)?l.namespaceURI:TV(null,"");break;default:l=TV(l=(V=8===V?l.parentNode:l).namespaceURI||null,V=V.tagName)}JZ(KR),GZ(KR,l)}function AR(){JZ(KR),JZ(gR),JZ(vR)}function qR(V){fR(vR.current);var l=fR(KR.current),W=TV(l,V.type);l!==W&&(GZ(gR,V),GZ(KR,W))}function _R(V){gR.current===V&&(JZ(KR),JZ(gR))}var $R=YZ(0);function Vd(V){for(var l=V;null!==l;){if(13===l.tag){var W=l.memoizedState;if(null!==W&&(null===(W=W.dehydrated)||"$?"===W.data||"$!"===W.data))return l}else if(19===l.tag&&void 0!==l.memoizedProps.revealOrder){if(128&l.flags)return l}else if(null!==l.child){l.child.return=l,l=l.child;continue}if(l===V)break;for(;null===l.sibling;){if(null===l.return||l.return===V)return null;l=l.return}l.sibling.return=l.return,l=l.sibling}return null}var ld=[];function Wd(){for(var V=0;V<ld.length;V++)ld[V]._workInProgressVersionPrimary=null;ld.length=0}var Ud=E.ReactCurrentDispatcher,Zd=E.ReactCurrentBatchConfig,Rd=0,dd=null,Nd=null,Fd=null,Td=!1,ad=!1,ed=0,td=0;function nd(){throw Error(W(321))}function Md(V,l){if(null===l)return!1;for(var W=0;W<l.length&&W<V.length;W++)if(!NU(V[W],l[W]))return!1;return!0}function kd(V,l,U,Z,R,d){if(Rd=d,dd=l,l.memoizedState=null,l.updateQueue=null,l.lanes=0,Ud.current=null===V||null===V.memoizedState?_d:$d,V=U(Z,R),ad){d=0;do{if(ad=!1,ed=0,25<=d)throw Error(W(301));d+=1,Fd=Nd=null,l.updateQueue=null,Ud.current=VN,V=U(Z,R)}while(ad)}if(Ud.current=qd,l=null!==Nd&&null!==Nd.next,Rd=0,Fd=Nd=dd=null,Td=!1,l)throw Error(W(300));return V}function md(){var V=0!==ed;return ed=0,V}function cd(){var V={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Fd?dd.memoizedState=Fd=V:Fd=Fd.next=V,Fd}function pd(){if(null===Nd){var V=dd.alternate;V=null!==V?V.memoizedState:null}else V=Nd.next;var l=null===Fd?dd.memoizedState:Fd.next;if(null!==l)Fd=l,Nd=V;else{if(null===V)throw Error(W(310));V={memoizedState:(Nd=V).memoizedState,baseState:Nd.baseState,baseQueue:Nd.baseQueue,queue:Nd.queue,next:null},null===Fd?dd.memoizedState=Fd=V:Fd=Fd.next=V}return Fd}function bd(V,l){return"function"==typeof l?l(V):l}function Sd(V){var l=pd(),U=l.queue;if(null===U)throw Error(W(311));U.lastRenderedReducer=V;var Z=Nd,R=Z.baseQueue,d=U.pending;if(null!==d){if(null!==R){var N=R.next;R.next=d.next,d.next=N}Z.baseQueue=R=d,U.pending=null}if(null!==R){d=R.next,Z=Z.baseState;var F=N=null,T=null,a=d;do{var e=a.lane;if((Rd&e)===e)null!==T&&(T=T.next={lane:0,action:a.action,hasEagerState:a.hasEagerState,eagerState:a.eagerState,next:null}),Z=a.hasEagerState?a.eagerState:V(Z,a.action);else{var t={lane:e,action:a.action,hasEagerState:a.hasEagerState,eagerState:a.eagerState,next:null};null===T?(F=T=t,N=Z):T=T.next=t,dd.lanes|=e,wF|=e}a=a.next}while(null!==a&&a!==d);null===T?N=Z:T.next=F,NU(Z,l.memoizedState)||(pN=!0),l.memoizedState=Z,l.baseState=N,l.baseQueue=T,U.lastRenderedState=Z}if(null!==(V=U.interleaved)){R=V;do{d=R.lane,dd.lanes|=d,wF|=d,R=R.next}while(R!==V)}else null===R&&(U.lanes=0);return[l.memoizedState,U.dispatch]}function Ed(V){var l=pd(),U=l.queue;if(null===U)throw Error(W(311));U.lastRenderedReducer=V;var Z=U.dispatch,R=U.pending,d=l.memoizedState;if(null!==R){U.pending=null;var N=R=R.next;do{d=V(d,N.action),N=N.next}while(N!==R);NU(d,l.memoizedState)||(pN=!0),l.memoizedState=d,null===l.baseQueue&&(l.baseState=d),U.lastRenderedState=d}return[d,Z]}function hd(){}function sd(V,l){var U=dd,Z=pd(),R=l(),d=!NU(Z.memoizedState,R);if(d&&(Z.memoizedState=R,pN=!0),Z=Z.queue,wd(Gd.bind(null,U,Z,V),[V]),Z.getSnapshot!==l||d||null!==Fd&&1&Fd.memoizedState.tag){if(U.flags|=2048,rd(9,Jd.bind(null,U,Z,R,l),void 0,null),null===iF)throw Error(W(349));30&Rd||Yd(U,l,R)}return R}function Yd(V,l,W){V.flags|=16384,V={getSnapshot:l,value:W},null===(l=dd.updateQueue)?(l={lastEffect:null,stores:null},dd.updateQueue=l,l.stores=[V]):null===(W=l.stores)?l.stores=[V]:W.push(V)}function Jd(V,l,W,U){l.value=W,l.getSnapshot=U,Xd(l)&&id(V)}function Gd(V,l,W){return W((function(){Xd(l)&&id(V)}))}function Xd(V){var l=V.getSnapshot;V=V.value;try{var W=l();return!NU(V,W)}catch(V){return!0}}function id(V){var l=uR(V,1);null!==l&&lT(l,V,1,-1)}function xd(V){var l=cd();return"function"==typeof V&&(V=V()),l.memoizedState=l.baseState=V,V={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:bd,lastRenderedState:V},l.queue=V,V=V.dispatch=vd.bind(null,dd,V),[l.memoizedState,V]}function rd(V,l,W,U){return V={tag:V,create:l,destroy:W,deps:U,next:null},null===(l=dd.updateQueue)?(l={lastEffect:null,stores:null},dd.updateQueue=l,l.lastEffect=V.next=V):null===(W=l.lastEffect)?l.lastEffect=V.next=V:(U=W.next,W.next=V,V.next=U,l.lastEffect=V),V}function Qd(){return pd().memoizedState}function zd(V,l,W,U){var Z=cd();dd.flags|=V,Z.memoizedState=rd(1|l,W,void 0,void 0===U?null:U)}function od(V,l,W,U){var Z=pd();U=void 0===U?null:U;var R=void 0;if(null!==Nd){var d=Nd.memoizedState;if(R=d.destroy,null!==U&&Md(U,d.deps))return void(Z.memoizedState=rd(l,W,R,U))}dd.flags|=V,Z.memoizedState=rd(1|l,W,R,U)}function ud(V,l){return zd(8390656,8,V,l)}function wd(V,l){return od(2048,8,V,l)}function yd(V,l){return od(4,2,V,l)}function jd(V,l){return od(4,4,V,l)}function Bd(V,l){return"function"==typeof l?(V=V(),l(V),function(){l(null)}):null!=l?(V=V(),l.current=V,function(){l.current=null}):void 0}function Dd(V,l,W){return W=null!=W?W.concat([V]):null,od(4,4,Bd.bind(null,l,V),W)}function Cd(){}function Hd(V,l){var W=pd();l=void 0===l?null:l;var U=W.memoizedState;return null!==U&&null!==l&&Md(l,U[1])?U[0]:(W.memoizedState=[V,l],V)}function Id(V,l){var W=pd();l=void 0===l?null:l;var U=W.memoizedState;return null!==U&&null!==l&&Md(l,U[1])?U[0]:(V=V(),W.memoizedState=[V,l],V)}function Od(V,l,W){return 21&Rd?(NU(W,l)||(W=ml(),dd.lanes|=W,wF|=W,V.baseState=!0),l):(V.baseState&&(V.baseState=!1,pN=!0),V.memoizedState=W)}function Ld(V,l){var W=Sl;Sl=0!==W&&4>W?W:4,V(!0);var U=Zd.transition;Zd.transition={};try{V(!1),l()}finally{Sl=W,Zd.transition=U}}function Kd(){return pd().memoizedState}function gd(V,l,W){var U=VT(V);if(W={lane:U,action:W,hasEagerState:!1,eagerState:null,next:null},fd(V))Pd(l,W);else if(null!==(W=oR(V,l,W,U))){lT(W,V,U,$F()),Ad(W,l,U)}}function vd(V,l,W){var U=VT(V),Z={lane:U,action:W,hasEagerState:!1,eagerState:null,next:null};if(fd(V))Pd(l,Z);else{var R=V.alternate;if(0===V.lanes&&(null===R||0===R.lanes)&&null!==(R=l.lastRenderedReducer))try{var d=l.lastRenderedState,N=R(d,W);if(Z.hasEagerState=!0,Z.eagerState=N,NU(N,d)){var F=l.interleaved;return null===F?(Z.next=Z,zR(l)):(Z.next=F.next,F.next=Z),void(l.interleaved=Z)}}catch(V){}null!==(W=oR(V,l,Z,U))&&(lT(W,V,U,Z=$F()),Ad(W,l,U))}}function fd(V){var l=V.alternate;return V===dd||null!==l&&l===dd}function Pd(V,l){ad=Td=!0;var W=V.pending;null===W?l.next=l:(l.next=W.next,W.next=l),V.pending=l}function Ad(V,l,W){if(4194240&W){var U=l.lanes;W|=U&=V.pendingLanes,l.lanes=W,bl(V,W)}}var qd={readContext:rR,useCallback:nd,useContext:nd,useEffect:nd,useImperativeHandle:nd,useInsertionEffect:nd,useLayoutEffect:nd,useMemo:nd,useReducer:nd,useRef:nd,useState:nd,useDebugValue:nd,useDeferredValue:nd,useTransition:nd,useMutableSource:nd,useSyncExternalStore:nd,useId:nd,unstable_isNewReconciler:!1},_d={readContext:rR,useCallback:function(V,l){return cd().memoizedState=[V,void 0===l?null:l],V},useContext:rR,useEffect:ud,useImperativeHandle:function(V,l,W){return W=null!=W?W.concat([V]):null,zd(4194308,4,Bd.bind(null,l,V),W)},useLayoutEffect:function(V,l){return zd(4194308,4,V,l)},useInsertionEffect:function(V,l){return zd(4,2,V,l)},useMemo:function(V,l){var W=cd();return l=void 0===l?null:l,V=V(),W.memoizedState=[V,l],V},useReducer:function(V,l,W){var U=cd();return l=void 0!==W?W(l):l,U.memoizedState=U.baseState=l,V={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:V,lastRenderedState:l},U.queue=V,V=V.dispatch=gd.bind(null,dd,V),[U.memoizedState,V]},useRef:function(V){return V={current:V},cd().memoizedState=V},useState:xd,useDebugValue:Cd,useDeferredValue:function(V){return cd().memoizedState=V},useTransition:function(){var V=xd(!1),l=V[0];return V=Ld.bind(null,V[1]),cd().memoizedState=V,[l,V]},useMutableSource:function(){},useSyncExternalStore:function(V,l,U){var Z=dd,R=cd();if(ZR){if(void 0===U)throw Error(W(407));U=U()}else{if(U=l(),null===iF)throw Error(W(349));30&Rd||Yd(Z,l,U)}R.memoizedState=U;var d={value:U,getSnapshot:l};return R.queue=d,ud(Gd.bind(null,Z,d,V),[V]),Z.flags|=2048,rd(9,Jd.bind(null,Z,d,U,l),void 0,null),U},useId:function(){var V=cd(),l=iF.identifierPrefix;if(ZR){var W=qZ;l=":"+l+"R"+(W=(AZ&~(1<<32-Nl(AZ)-1)).toString(32)+W),0<(W=ed++)&&(l+="H"+W.toString(32)),l+=":"}else l=":"+l+"r"+(W=td++).toString(32)+":";return V.memoizedState=l},unstable_isNewReconciler:!1},$d={readContext:rR,useCallback:Hd,useContext:rR,useEffect:wd,useImperativeHandle:Dd,useInsertionEffect:yd,useLayoutEffect:jd,useMemo:Id,useReducer:Sd,useRef:Qd,useState:function(){return Sd(bd)},useDebugValue:Cd,useDeferredValue:function(V){return Od(pd(),Nd.memoizedState,V)},useTransition:function(){return[Sd(bd)[0],pd().memoizedState]},useMutableSource:hd,useSyncExternalStore:sd,useId:Kd,unstable_isNewReconciler:!1},VN={readContext:rR,useCallback:Hd,useContext:rR,useEffect:wd,useImperativeHandle:Dd,useInsertionEffect:yd,useLayoutEffect:jd,useMemo:Id,useReducer:Ed,useRef:Qd,useState:function(){return Ed(bd)},useDebugValue:Cd,useDeferredValue:function(V){var l=pd();return null===Nd?l.memoizedState=V:Od(l,Nd.memoizedState,V)},useTransition:function(){return[Ed(bd)[0],pd().memoizedState]},useMutableSource:hd,useSyncExternalStore:sd,useId:Kd,unstable_isNewReconciler:!1};function lN(V,l){if(V&&V.defaultProps){for(var W in l=B({},l),V=V.defaultProps)void 0===l[W]&&(l[W]=V[W]);return l}return l}function WN(V,l,W,U){W=null==(W=W(U,l=V.memoizedState))?l:B({},l,W),V.memoizedState=W,0===V.lanes&&(V.updateQueue.baseState=W)}var UN={isMounted:function(V){return!!(V=V._reactInternals)&&OV(V)===V},enqueueSetState:function(V,l,W){V=V._reactInternals;var U=$F(),Z=VT(V),R=BR(U,Z);R.payload=l,null!=W&&(R.callback=W),null!==(l=DR(V,R,Z))&&(lT(l,V,Z,U),CR(l,V,Z))},enqueueReplaceState:function(V,l,W){V=V._reactInternals;var U=$F(),Z=VT(V),R=BR(U,Z);R.tag=1,R.payload=l,null!=W&&(R.callback=W),null!==(l=DR(V,R,Z))&&(lT(l,V,Z,U),CR(l,V,Z))},enqueueForceUpdate:function(V,l){V=V._reactInternals;var W=$F(),U=VT(V),Z=BR(W,U);Z.tag=2,null!=l&&(Z.callback=l),null!==(l=DR(V,Z,U))&&(lT(l,V,U,W),CR(l,V,U))}};function ZN(V,l,W,U,Z,R,d){return"function"==typeof(V=V.stateNode).shouldComponentUpdate?V.shouldComponentUpdate(U,R,d):!l.prototype||!l.prototype.isPureReactComponent||(!FU(W,U)||!FU(Z,R))}function RN(V,l,W){var U=!1,Z=XZ,R=l.contextType;return"object"==typeof R&&null!==R?R=rR(R):(Z=zZ(l)?rZ:iZ.current,R=(U=null!=(U=l.contextTypes))?QZ(V,Z):XZ),l=new l(W,R),V.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=UN,V.stateNode=l,l._reactInternals=V,U&&((V=V.stateNode).__reactInternalMemoizedUnmaskedChildContext=Z,V.__reactInternalMemoizedMaskedChildContext=R),l}function dN(V,l,W,U){V=l.state,"function"==typeof l.componentWillReceiveProps&&l.componentWillReceiveProps(W,U),"function"==typeof l.UNSAFE_componentWillReceiveProps&&l.UNSAFE_componentWillReceiveProps(W,U),l.state!==V&&UN.enqueueReplaceState(l,l.state,null)}function NN(V,l,W,U){var Z=V.stateNode;Z.props=W,Z.state=V.memoizedState,Z.refs={},yR(V);var R=l.contextType;"object"==typeof R&&null!==R?Z.context=rR(R):(R=zZ(l)?rZ:iZ.current,Z.context=QZ(V,R)),Z.state=V.memoizedState,"function"==typeof(R=l.getDerivedStateFromProps)&&(WN(V,l,R,W),Z.state=V.memoizedState),"function"==typeof l.getDerivedStateFromProps||"function"==typeof Z.getSnapshotBeforeUpdate||"function"!=typeof Z.UNSAFE_componentWillMount&&"function"!=typeof Z.componentWillMount||(l=Z.state,"function"==typeof Z.componentWillMount&&Z.componentWillMount(),"function"==typeof Z.UNSAFE_componentWillMount&&Z.UNSAFE_componentWillMount(),l!==Z.state&&UN.enqueueReplaceState(Z,Z.state,null),IR(V,W,Z,U),Z.state=V.memoizedState),"function"==typeof Z.componentDidMount&&(V.flags|=4194308)}function FN(V,l){try{var W="",U=l;do{W+=I(U),U=U.return}while(U);var Z=W}catch(V){Z="\nError generating stack: "+V.message+"\n"+V.stack}return{value:V,source:l,stack:Z,digest:null}}function TN(V,l,W){return{value:V,source:null,stack:null!=W?W:null,digest:null!=l?l:null}}function aN(V,l){try{console.error(l.value)}catch(V){setTimeout((function(){throw V}))}}var eN="function"==typeof WeakMap?WeakMap:Map;function tN(V,l,W){(W=BR(-1,W)).tag=3,W.payload={element:null};var U=l.value;return W.callback=function(){OF||(OF=!0,LF=U),aN(0,l)},W}function nN(V,l,W){(W=BR(-1,W)).tag=3;var U=V.type.getDerivedStateFromError;if("function"==typeof U){var Z=l.value;W.payload=function(){return U(Z)},W.callback=function(){aN(0,l)}}var R=V.stateNode;return null!==R&&"function"==typeof R.componentDidCatch&&(W.callback=function(){aN(0,l),"function"!=typeof U&&(null===KF?KF=new Set([this]):KF.add(this));var V=l.stack;this.componentDidCatch(l.value,{componentStack:null!==V?V:""})}),W}function MN(V,l,W){var U=V.pingCache;if(null===U){U=V.pingCache=new eN;var Z=new Set;U.set(l,Z)}else void 0===(Z=U.get(l))&&(Z=new Set,U.set(l,Z));Z.has(W)||(Z.add(W),V=YT.bind(null,V,l,W),l.then(V,V))}function kN(V){do{var l;if((l=13===V.tag)&&(l=null===(l=V.memoizedState)||null!==l.dehydrated),l)return V;V=V.return}while(null!==V);return null}function mN(V,l,W,U,Z){return 1&V.mode?(V.flags|=65536,V.lanes=Z,V):(V===l?V.flags|=65536:(V.flags|=128,W.flags|=131072,W.flags&=-52805,1===W.tag&&(null===W.alternate?W.tag=17:((l=BR(-1,1)).tag=2,DR(W,l,1))),W.lanes|=1),V)}var cN=E.ReactCurrentOwner,pN=!1;function bN(V,l,W,U){l.child=null===V?ER(l,null,W,U):SR(l,V.child,W,U)}function SN(V,l,W,U,Z){W=W.render;var R=l.ref;return xR(l,Z),U=kd(V,l,W,U,R,Z),W=md(),null===V||pN?(ZR&&W&&VR(l),l.flags|=1,bN(V,l,U,Z),l.child):(l.updateQueue=V.updateQueue,l.flags&=-2053,V.lanes&=~Z,ON(V,l,Z))}function EN(V,l,W,U,Z){if(null===V){var R=W.type;return"function"!=typeof R||QT(R)||void 0!==R.defaultProps||null!==W.compare||void 0!==W.defaultProps?((V=oT(W.type,null,U,l,l.mode,Z)).ref=l.ref,V.return=l,l.child=V):(l.tag=15,l.type=R,hN(V,l,R,U,Z))}if(R=V.child,!(V.lanes&Z)){var d=R.memoizedProps;if((W=null!==(W=W.compare)?W:FU)(d,U)&&V.ref===l.ref)return ON(V,l,Z)}return l.flags|=1,(V=zT(R,U)).ref=l.ref,V.return=l,l.child=V}function hN(V,l,W,U,Z){if(null!==V){var R=V.memoizedProps;if(FU(R,U)&&V.ref===l.ref){if(pN=!1,l.pendingProps=U=R,!(V.lanes&Z))return l.lanes=V.lanes,ON(V,l,Z);131072&V.flags&&(pN=!0)}}return JN(V,l,W,U,Z)}function sN(V,l,W){var U=l.pendingProps,Z=U.children,R=null!==V?V.memoizedState:null;if("hidden"===U.mode)if(1&l.mode){if(!(1073741824&W))return V=null!==R?R.baseLanes|W:W,l.lanes=l.childLanes=1073741824,l.memoizedState={baseLanes:V,cachePool:null,transitions:null},l.updateQueue=null,GZ(zF,QF),QF|=V,null;l.memoizedState={baseLanes:0,cachePool:null,transitions:null},U=null!==R?R.baseLanes:W,GZ(zF,QF),QF|=U}else l.memoizedState={baseLanes:0,cachePool:null,transitions:null},GZ(zF,QF),QF|=W;else null!==R?(U=R.baseLanes|W,l.memoizedState=null):U=W,GZ(zF,QF),QF|=U;return bN(V,l,Z,W),l.child}function YN(V,l){var W=l.ref;(null===V&&null!==W||null!==V&&V.ref!==W)&&(l.flags|=512,l.flags|=2097152)}function JN(V,l,W,U,Z){var R=zZ(W)?rZ:iZ.current;return R=QZ(l,R),xR(l,Z),W=kd(V,l,W,U,R,Z),U=md(),null===V||pN?(ZR&&U&&VR(l),l.flags|=1,bN(V,l,W,Z),l.child):(l.updateQueue=V.updateQueue,l.flags&=-2053,V.lanes&=~Z,ON(V,l,Z))}function GN(V,l,W,U,Z){if(zZ(W)){var R=!0;yZ(l)}else R=!1;if(xR(l,Z),null===l.stateNode)IN(V,l),RN(l,W,U),NN(l,W,U,Z),U=!0;else if(null===V){var d=l.stateNode,N=l.memoizedProps;d.props=N;var F=d.context,T=W.contextType;"object"==typeof T&&null!==T?T=rR(T):T=QZ(l,T=zZ(W)?rZ:iZ.current);var a=W.getDerivedStateFromProps,e="function"==typeof a||"function"==typeof d.getSnapshotBeforeUpdate;e||"function"!=typeof d.UNSAFE_componentWillReceiveProps&&"function"!=typeof d.componentWillReceiveProps||(N!==U||F!==T)&&dN(l,d,U,T),wR=!1;var t=l.memoizedState;d.state=t,IR(l,U,d,Z),F=l.memoizedState,N!==U||t!==F||xZ.current||wR?("function"==typeof a&&(WN(l,W,a,U),F=l.memoizedState),(N=wR||ZN(l,W,N,U,t,F,T))?(e||"function"!=typeof d.UNSAFE_componentWillMount&&"function"!=typeof d.componentWillMount||("function"==typeof d.componentWillMount&&d.componentWillMount(),"function"==typeof d.UNSAFE_componentWillMount&&d.UNSAFE_componentWillMount()),"function"==typeof d.componentDidMount&&(l.flags|=4194308)):("function"==typeof d.componentDidMount&&(l.flags|=4194308),l.memoizedProps=U,l.memoizedState=F),d.props=U,d.state=F,d.context=T,U=N):("function"==typeof d.componentDidMount&&(l.flags|=4194308),U=!1)}else{d=l.stateNode,jR(V,l),N=l.memoizedProps,T=l.type===l.elementType?N:lN(l.type,N),d.props=T,e=l.pendingProps,t=d.context,"object"==typeof(F=W.contextType)&&null!==F?F=rR(F):F=QZ(l,F=zZ(W)?rZ:iZ.current);var n=W.getDerivedStateFromProps;(a="function"==typeof n||"function"==typeof d.getSnapshotBeforeUpdate)||"function"!=typeof d.UNSAFE_componentWillReceiveProps&&"function"!=typeof d.componentWillReceiveProps||(N!==e||t!==F)&&dN(l,d,U,F),wR=!1,t=l.memoizedState,d.state=t,IR(l,U,d,Z);var M=l.memoizedState;N!==e||t!==M||xZ.current||wR?("function"==typeof n&&(WN(l,W,n,U),M=l.memoizedState),(T=wR||ZN(l,W,T,U,t,M,F)||!1)?(a||"function"!=typeof d.UNSAFE_componentWillUpdate&&"function"!=typeof d.componentWillUpdate||("function"==typeof d.componentWillUpdate&&d.componentWillUpdate(U,M,F),"function"==typeof d.UNSAFE_componentWillUpdate&&d.UNSAFE_componentWillUpdate(U,M,F)),"function"==typeof d.componentDidUpdate&&(l.flags|=4),"function"==typeof d.getSnapshotBeforeUpdate&&(l.flags|=1024)):("function"!=typeof d.componentDidUpdate||N===V.memoizedProps&&t===V.memoizedState||(l.flags|=4),"function"!=typeof d.getSnapshotBeforeUpdate||N===V.memoizedProps&&t===V.memoizedState||(l.flags|=1024),l.memoizedProps=U,l.memoizedState=M),d.props=U,d.state=M,d.context=F,U=T):("function"!=typeof d.componentDidUpdate||N===V.memoizedProps&&t===V.memoizedState||(l.flags|=4),"function"!=typeof d.getSnapshotBeforeUpdate||N===V.memoizedProps&&t===V.memoizedState||(l.flags|=1024),U=!1)}return XN(V,l,W,U,R,Z)}function XN(V,l,W,U,Z,R){YN(V,l);var d=!!(128&l.flags);if(!U&&!d)return Z&&jZ(l,W,!1),ON(V,l,R);U=l.stateNode,cN.current=l;var N=d&&"function"!=typeof W.getDerivedStateFromError?null:U.render();return l.flags|=1,null!==V&&d?(l.child=SR(l,V.child,null,R),l.child=SR(l,null,N,R)):bN(V,l,N,R),l.memoizedState=U.state,Z&&jZ(l,W,!0),l.child}function iN(V){var l=V.stateNode;l.pendingContext?uZ(0,l.pendingContext,l.pendingContext!==l.context):l.context&&uZ(0,l.context,!1),PR(V,l.containerInfo)}function xN(V,l,W,U,Z){return nR(),MR(Z),l.flags|=256,bN(V,l,W,U),l.child}var rN,QN,zN,oN,uN={dehydrated:null,treeContext:null,retryLane:0};function wN(V){return{baseLanes:V,cachePool:null,transitions:null}}function yN(V,l,U){var Z,R=l.pendingProps,d=$R.current,N=!1,F=!!(128&l.flags);if((Z=F)||(Z=(null===V||null!==V.memoizedState)&&!!(2&d)),Z?(N=!0,l.flags&=-129):null!==V&&null===V.memoizedState||(d|=1),GZ($R,1&d),null===V)return TR(l),null!==(V=l.memoizedState)&&null!==(V=V.dehydrated)?(1&l.mode?"$!"===V.data?l.lanes=8:l.lanes=1073741824:l.lanes=1,null):(F=R.children,V=R.fallback,N?(R=l.mode,N=l.child,F={mode:"hidden",children:F},1&R||null===N?N=wT(F,R,0,null):(N.childLanes=0,N.pendingProps=F),V=uT(V,R,U,null),N.return=l,V.return=l,N.sibling=V,l.child=N,l.child.memoizedState=wN(U),l.memoizedState=uN,V):jN(l,F));if(null!==(d=V.memoizedState)&&null!==(Z=d.dehydrated))return function(V,l,U,Z,R,d,N){if(U)return 256&l.flags?(l.flags&=-257,BN(V,l,N,Z=TN(Error(W(422))))):null!==l.memoizedState?(l.child=V.child,l.flags|=128,null):(d=Z.fallback,R=l.mode,Z=wT({mode:"visible",children:Z.children},R,0,null),(d=uT(d,R,N,null)).flags|=2,Z.return=l,d.return=l,Z.sibling=d,l.child=Z,1&l.mode&&SR(l,V.child,null,N),l.child.memoizedState=wN(N),l.memoizedState=uN,d);if(!(1&l.mode))return BN(V,l,N,null);if("$!"===R.data){if(Z=R.nextSibling&&R.nextSibling.dataset)var F=Z.dgst;return Z=F,BN(V,l,N,Z=TN(d=Error(W(419)),Z,void 0))}if(F=!!(N&V.childLanes),pN||F){if(null!==(Z=iF)){switch(N&-N){case 4:R=2;break;case 16:R=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:R=32;break;case 536870912:R=268435456;break;default:R=0}0!==(R=R&(Z.suspendedLanes|N)?0:R)&&R!==d.retryLane&&(d.retryLane=R,uR(V,R),lT(Z,V,R,-1))}return MT(),BN(V,l,N,Z=TN(Error(W(421))))}return"$?"===R.data?(l.flags|=128,l.child=V.child,l=GT.bind(null,V),R._reactRetry=l,null):(V=d.treeContext,UR=TZ(R.nextSibling),WR=l,ZR=!0,RR=null,null!==V&&(vZ[fZ++]=AZ,vZ[fZ++]=qZ,vZ[fZ++]=PZ,AZ=V.id,qZ=V.overflow,PZ=l),l=jN(l,Z.children),l.flags|=4096,l)}(V,l,F,R,Z,d,U);if(N){N=R.fallback,F=l.mode,Z=(d=V.child).sibling;var T={mode:"hidden",children:R.children};return 1&F||l.child===d?(R=zT(d,T)).subtreeFlags=14680064&d.subtreeFlags:((R=l.child).childLanes=0,R.pendingProps=T,l.deletions=null),null!==Z?N=zT(Z,N):(N=uT(N,F,U,null)).flags|=2,N.return=l,R.return=l,R.sibling=N,l.child=R,R=N,N=l.child,F=null===(F=V.child.memoizedState)?wN(U):{baseLanes:F.baseLanes|U,cachePool:null,transitions:F.transitions},N.memoizedState=F,N.childLanes=V.childLanes&~U,l.memoizedState=uN,R}return V=(N=V.child).sibling,R=zT(N,{mode:"visible",children:R.children}),!(1&l.mode)&&(R.lanes=U),R.return=l,R.sibling=null,null!==V&&(null===(U=l.deletions)?(l.deletions=[V],l.flags|=16):U.push(V)),l.child=R,l.memoizedState=null,R}function jN(V,l){return(l=wT({mode:"visible",children:l},V.mode,0,null)).return=V,V.child=l}function BN(V,l,W,U){return null!==U&&MR(U),SR(l,V.child,null,W),(V=jN(l,l.pendingProps.children)).flags|=2,l.memoizedState=null,V}function DN(V,l,W){V.lanes|=l;var U=V.alternate;null!==U&&(U.lanes|=l),iR(V.return,l,W)}function CN(V,l,W,U,Z){var R=V.memoizedState;null===R?V.memoizedState={isBackwards:l,rendering:null,renderingStartTime:0,last:U,tail:W,tailMode:Z}:(R.isBackwards=l,R.rendering=null,R.renderingStartTime=0,R.last=U,R.tail=W,R.tailMode=Z)}function HN(V,l,W){var U=l.pendingProps,Z=U.revealOrder,R=U.tail;if(bN(V,l,U.children,W),2&(U=$R.current))U=1&U|2,l.flags|=128;else{if(null!==V&&128&V.flags)V:for(V=l.child;null!==V;){if(13===V.tag)null!==V.memoizedState&&DN(V,W,l);else if(19===V.tag)DN(V,W,l);else if(null!==V.child){V.child.return=V,V=V.child;continue}if(V===l)break V;for(;null===V.sibling;){if(null===V.return||V.return===l)break V;V=V.return}V.sibling.return=V.return,V=V.sibling}U&=1}if(GZ($R,U),1&l.mode)switch(Z){case"forwards":for(W=l.child,Z=null;null!==W;)null!==(V=W.alternate)&&null===Vd(V)&&(Z=W),W=W.sibling;null===(W=Z)?(Z=l.child,l.child=null):(Z=W.sibling,W.sibling=null),CN(l,!1,Z,W,R);break;case"backwards":for(W=null,Z=l.child,l.child=null;null!==Z;){if(null!==(V=Z.alternate)&&null===Vd(V)){l.child=Z;break}V=Z.sibling,Z.sibling=W,W=Z,Z=V}CN(l,!0,W,null,R);break;case"together":CN(l,!1,null,null,void 0);break;default:l.memoizedState=null}else l.memoizedState=null;return l.child}function IN(V,l){!(1&l.mode)&&null!==V&&(V.alternate=null,l.alternate=null,l.flags|=2)}function ON(V,l,U){if(null!==V&&(l.dependencies=V.dependencies),wF|=l.lanes,!(U&l.childLanes))return null;if(null!==V&&l.child!==V.child)throw Error(W(153));if(null!==l.child){for(U=zT(V=l.child,V.pendingProps),l.child=U,U.return=l;null!==V.sibling;)V=V.sibling,(U=U.sibling=zT(V,V.pendingProps)).return=l;U.sibling=null}return l.child}function LN(V,l){if(!ZR)switch(V.tailMode){case"hidden":l=V.tail;for(var W=null;null!==l;)null!==l.alternate&&(W=l),l=l.sibling;null===W?V.tail=null:W.sibling=null;break;case"collapsed":W=V.tail;for(var U=null;null!==W;)null!==W.alternate&&(U=W),W=W.sibling;null===U?l||null===V.tail?V.tail=null:V.tail.sibling=null:U.sibling=null}}function KN(V){var l=null!==V.alternate&&V.alternate.child===V.child,W=0,U=0;if(l)for(var Z=V.child;null!==Z;)W|=Z.lanes|Z.childLanes,U|=14680064&Z.subtreeFlags,U|=14680064&Z.flags,Z.return=V,Z=Z.sibling;else for(Z=V.child;null!==Z;)W|=Z.lanes|Z.childLanes,U|=Z.subtreeFlags,U|=Z.flags,Z.return=V,Z=Z.sibling;return V.subtreeFlags|=U,V.childLanes=W,l}function gN(V,l,U){var R=l.pendingProps;switch(lR(l),l.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return KN(l),null;case 1:case 17:return zZ(l.type)&&oZ(),KN(l),null;case 3:return R=l.stateNode,AR(),JZ(xZ),JZ(iZ),Wd(),R.pendingContext&&(R.context=R.pendingContext,R.pendingContext=null),null!==V&&null!==V.child||(eR(l)?l.flags|=4:null===V||V.memoizedState.isDehydrated&&!(256&l.flags)||(l.flags|=1024,null!==RR&&(RT(RR),RR=null))),QN(V,l),KN(l),null;case 5:_R(l);var d=fR(vR.current);if(U=l.type,null!==V&&null!=l.stateNode)zN(V,l,U,R,d),V.ref!==l.ref&&(l.flags|=512,l.flags|=2097152);else{if(!R){if(null===l.stateNode)throw Error(W(166));return KN(l),null}if(V=fR(KR.current),eR(l)){R=l.stateNode,U=l.type;var N=l.memoizedProps;switch(R[tZ]=l,R[nZ]=N,V=!!(1&l.mode),U){case"dialog":DU("cancel",R),DU("close",R);break;case"iframe":case"object":case"embed":DU("load",R);break;case"video":case"audio":for(d=0;d<wU.length;d++)DU(wU[d],R);break;case"source":DU("error",R);break;case"img":case"image":case"link":DU("error",R),DU("load",R);break;case"details":DU("toggle",R);break;case"input":q(R,N),DU("invalid",R);break;case"select":R._wrapperState={wasMultiple:!!N.multiple},DU("invalid",R);break;case"textarea":RV(R,N),DU("invalid",R)}for(var F in bV(U,N),d=null,N)if(N.hasOwnProperty(F)){var T=N[F];"children"===F?"string"==typeof T?R.textContent!==T&&(!0!==N.suppressHydrationWarning&&_U(R.textContent,T,V),d=["children",T]):"number"==typeof T&&R.textContent!==""+T&&(!0!==N.suppressHydrationWarning&&_U(R.textContent,T,V),d=["children",""+T]):Z.hasOwnProperty(F)&&null!=T&&"onScroll"===F&&DU("scroll",R)}switch(U){case"input":v(R),VV(R,N,!0);break;case"textarea":v(R),NV(R);break;case"select":case"option":break;default:"function"==typeof N.onClick&&(R.onclick=$U)}R=d,l.updateQueue=R,null!==R&&(l.flags|=4)}else{F=9===d.nodeType?d:d.ownerDocument,"http://www.w3.org/1999/xhtml"===V&&(V=FV(U)),"http://www.w3.org/1999/xhtml"===V?"script"===U?((V=F.createElement("div")).innerHTML="<script><\/script>",V=V.removeChild(V.firstChild)):"string"==typeof R.is?V=F.createElement(U,{is:R.is}):(V=F.createElement(U),"select"===U&&(F=V,R.multiple?F.multiple=!0:R.size&&(F.size=R.size))):V=F.createElementNS(V,U),V[tZ]=l,V[nZ]=R,rN(V,l,!1,!1),l.stateNode=V;V:{switch(F=SV(U,R),U){case"dialog":DU("cancel",V),DU("close",V),d=R;break;case"iframe":case"object":case"embed":DU("load",V),d=R;break;case"video":case"audio":for(d=0;d<wU.length;d++)DU(wU[d],V);d=R;break;case"source":DU("error",V),d=R;break;case"img":case"image":case"link":DU("error",V),DU("load",V),d=R;break;case"details":DU("toggle",V),d=R;break;case"input":q(V,R),d=A(V,R),DU("invalid",V);break;case"option":default:d=R;break;case"select":V._wrapperState={wasMultiple:!!R.multiple},d=B({},R,{value:void 0}),DU("invalid",V);break;case"textarea":RV(V,R),d=ZV(V,R),DU("invalid",V)}for(N in bV(U,d),T=d)if(T.hasOwnProperty(N)){var a=T[N];"style"===N?cV(V,a):"dangerouslySetInnerHTML"===N?null!=(a=a?a.__html:void 0)&&tV(V,a):"children"===N?"string"==typeof a?("textarea"!==U||""!==a)&&nV(V,a):"number"==typeof a&&nV(V,""+a):"suppressContentEditableWarning"!==N&&"suppressHydrationWarning"!==N&&"autoFocus"!==N&&(Z.hasOwnProperty(N)?null!=a&&"onScroll"===N&&DU("scroll",V):null!=a&&S(V,N,a,F))}switch(U){case"input":v(V),VV(V,R,!1);break;case"textarea":v(V),NV(V);break;case"option":null!=R.value&&V.setAttribute("value",""+K(R.value));break;case"select":V.multiple=!!R.multiple,null!=(N=R.value)?UV(V,!!R.multiple,N,!1):null!=R.defaultValue&&UV(V,!!R.multiple,R.defaultValue,!0);break;default:"function"==typeof d.onClick&&(V.onclick=$U)}switch(U){case"button":case"input":case"select":case"textarea":R=!!R.autoFocus;break V;case"img":R=!0;break V;default:R=!1}}R&&(l.flags|=4)}null!==l.ref&&(l.flags|=512,l.flags|=2097152)}return KN(l),null;case 6:if(V&&null!=l.stateNode)oN(V,l,V.memoizedProps,R);else{if("string"!=typeof R&&null===l.stateNode)throw Error(W(166));if(U=fR(vR.current),fR(KR.current),eR(l)){if(R=l.stateNode,U=l.memoizedProps,R[tZ]=l,(N=R.nodeValue!==U)&&null!==(V=WR))switch(V.tag){case 3:_U(R.nodeValue,U,!!(1&V.mode));break;case 5:!0!==V.memoizedProps.suppressHydrationWarning&&_U(R.nodeValue,U,!!(1&V.mode))}N&&(l.flags|=4)}else(R=(9===U.nodeType?U:U.ownerDocument).createTextNode(R))[tZ]=l,l.stateNode=R}return KN(l),null;case 13:if(JZ($R),R=l.memoizedState,null===V||null!==V.memoizedState&&null!==V.memoizedState.dehydrated){if(ZR&&null!==UR&&1&l.mode&&!(128&l.flags))tR(),nR(),l.flags|=98560,N=!1;else if(N=eR(l),null!==R&&null!==R.dehydrated){if(null===V){if(!N)throw Error(W(318));if(!(N=null!==(N=l.memoizedState)?N.dehydrated:null))throw Error(W(317));N[tZ]=l}else nR(),!(128&l.flags)&&(l.memoizedState=null),l.flags|=4;KN(l),N=!1}else null!==RR&&(RT(RR),RR=null),N=!0;if(!N)return 65536&l.flags?l:null}return 128&l.flags?(l.lanes=U,l):((R=null!==R)!==(null!==V&&null!==V.memoizedState)&&R&&(l.child.flags|=8192,1&l.mode&&(null===V||1&$R.current?0===oF&&(oF=3):MT())),null!==l.updateQueue&&(l.flags|=4),KN(l),null);case 4:return AR(),QN(V,l),null===V&&IU(l.stateNode.containerInfo),KN(l),null;case 10:return XR(l.type._context),KN(l),null;case 19:if(JZ($R),null===(N=l.memoizedState))return KN(l),null;if(R=!!(128&l.flags),null===(F=N.rendering))if(R)LN(N,!1);else{if(0!==oF||null!==V&&128&V.flags)for(V=l.child;null!==V;){if(null!==(F=Vd(V))){for(l.flags|=128,LN(N,!1),null!==(R=F.updateQueue)&&(l.updateQueue=R,l.flags|=4),l.subtreeFlags=0,R=U,U=l.child;null!==U;)V=R,(N=U).flags&=14680066,null===(F=N.alternate)?(N.childLanes=0,N.lanes=V,N.child=null,N.subtreeFlags=0,N.memoizedProps=null,N.memoizedState=null,N.updateQueue=null,N.dependencies=null,N.stateNode=null):(N.childLanes=F.childLanes,N.lanes=F.lanes,N.child=F.child,N.subtreeFlags=0,N.deletions=null,N.memoizedProps=F.memoizedProps,N.memoizedState=F.memoizedState,N.updateQueue=F.updateQueue,N.type=F.type,V=F.dependencies,N.dependencies=null===V?null:{lanes:V.lanes,firstContext:V.firstContext}),U=U.sibling;return GZ($R,1&$R.current|2),l.child}V=V.sibling}null!==N.tail&&_V()>HF&&(l.flags|=128,R=!0,LN(N,!1),l.lanes=4194304)}else{if(!R)if(null!==(V=Vd(F))){if(l.flags|=128,R=!0,null!==(U=V.updateQueue)&&(l.updateQueue=U,l.flags|=4),LN(N,!0),null===N.tail&&"hidden"===N.tailMode&&!F.alternate&&!ZR)return KN(l),null}else 2*_V()-N.renderingStartTime>HF&&1073741824!==U&&(l.flags|=128,R=!0,LN(N,!1),l.lanes=4194304);N.isBackwards?(F.sibling=l.child,l.child=F):(null!==(U=N.last)?U.sibling=F:l.child=F,N.last=F)}return null!==N.tail?(l=N.tail,N.rendering=l,N.tail=l.sibling,N.renderingStartTime=_V(),l.sibling=null,U=$R.current,GZ($R,R?1&U|2:1&U),l):(KN(l),null);case 22:case 23:return aT(),R=null!==l.memoizedState,null!==V&&null!==V.memoizedState!==R&&(l.flags|=8192),R&&1&l.mode?!!(1073741824&QF)&&(KN(l),6&l.subtreeFlags&&(l.flags|=8192)):KN(l),null;case 24:case 25:return null}throw Error(W(156,l.tag))}function vN(V,l){switch(lR(l),l.tag){case 1:return zZ(l.type)&&oZ(),65536&(V=l.flags)?(l.flags=-65537&V|128,l):null;case 3:return AR(),JZ(xZ),JZ(iZ),Wd(),65536&(V=l.flags)&&!(128&V)?(l.flags=-65537&V|128,l):null;case 5:return _R(l),null;case 13:if(JZ($R),null!==(V=l.memoizedState)&&null!==V.dehydrated){if(null===l.alternate)throw Error(W(340));nR()}return 65536&(V=l.flags)?(l.flags=-65537&V|128,l):null;case 19:return JZ($R),null;case 4:return AR(),null;case 10:return XR(l.type._context),null;case 22:case 23:return aT(),null;default:return null}}rN=function(V,l){for(var W=l.child;null!==W;){if(5===W.tag||6===W.tag)V.appendChild(W.stateNode);else if(4!==W.tag&&null!==W.child){W.child.return=W,W=W.child;continue}if(W===l)break;for(;null===W.sibling;){if(null===W.return||W.return===l)return;W=W.return}W.sibling.return=W.return,W=W.sibling}},QN=function(){},zN=function(V,l,W,U){var R=V.memoizedProps;if(R!==U){V=l.stateNode,fR(KR.current);var d,N=null;switch(W){case"input":R=A(V,R),U=A(V,U),N=[];break;case"select":R=B({},R,{value:void 0}),U=B({},U,{value:void 0}),N=[];break;case"textarea":R=ZV(V,R),U=ZV(V,U),N=[];break;default:"function"!=typeof R.onClick&&"function"==typeof U.onClick&&(V.onclick=$U)}for(a in bV(W,U),W=null,R)if(!U.hasOwnProperty(a)&&R.hasOwnProperty(a)&&null!=R[a])if("style"===a){var F=R[a];for(d in F)F.hasOwnProperty(d)&&(W||(W={}),W[d]="")}else"dangerouslySetInnerHTML"!==a&&"children"!==a&&"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(Z.hasOwnProperty(a)?N||(N=[]):(N=N||[]).push(a,null));for(a in U){var T=U[a];if(F=null!=R?R[a]:void 0,U.hasOwnProperty(a)&&T!==F&&(null!=T||null!=F))if("style"===a)if(F){for(d in F)!F.hasOwnProperty(d)||T&&T.hasOwnProperty(d)||(W||(W={}),W[d]="");for(d in T)T.hasOwnProperty(d)&&F[d]!==T[d]&&(W||(W={}),W[d]=T[d])}else W||(N||(N=[]),N.push(a,W)),W=T;else"dangerouslySetInnerHTML"===a?(T=T?T.__html:void 0,F=F?F.__html:void 0,null!=T&&F!==T&&(N=N||[]).push(a,T)):"children"===a?"string"!=typeof T&&"number"!=typeof T||(N=N||[]).push(a,""+T):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&(Z.hasOwnProperty(a)?(null!=T&&"onScroll"===a&&DU("scroll",V),N||F===T||(N=[])):(N=N||[]).push(a,T))}W&&(N=N||[]).push("style",W);var a=N;(l.updateQueue=a)&&(l.flags|=4)}},oN=function(V,l,W,U){W!==U&&(l.flags|=4)};var fN=!1,PN=!1,AN="function"==typeof WeakSet?WeakSet:Set,qN=null;function _N(V,l){var W=V.ref;if(null!==W)if("function"==typeof W)try{W(null)}catch(W){sT(V,l,W)}else W.current=null}function $N(V,l,W){try{W()}catch(W){sT(V,l,W)}}var VF=!1;function lF(V,l,W){var U=l.updateQueue;if(null!==(U=null!==U?U.lastEffect:null)){var Z=U=U.next;do{if((Z.tag&V)===V){var R=Z.destroy;Z.destroy=void 0,void 0!==R&&$N(l,W,R)}Z=Z.next}while(Z!==U)}}function WF(V,l){if(null!==(l=null!==(l=l.updateQueue)?l.lastEffect:null)){var W=l=l.next;do{if((W.tag&V)===V){var U=W.create;W.destroy=U()}W=W.next}while(W!==l)}}function UF(V){var l=V.ref;if(null!==l){var W=V.stateNode;V.tag,V=W,"function"==typeof l?l(V):l.current=V}}function ZF(V){var l=V.alternate;null!==l&&(V.alternate=null,ZF(l)),V.child=null,V.deletions=null,V.sibling=null,5===V.tag&&(null!==(l=V.stateNode)&&(delete l[tZ],delete l[nZ],delete l[kZ],delete l[mZ],delete l[cZ])),V.stateNode=null,V.return=null,V.dependencies=null,V.memoizedProps=null,V.memoizedState=null,V.pendingProps=null,V.stateNode=null,V.updateQueue=null}function RF(V){return 5===V.tag||3===V.tag||4===V.tag}function dF(V){V:for(;;){for(;null===V.sibling;){if(null===V.return||RF(V.return))return null;V=V.return}for(V.sibling.return=V.return,V=V.sibling;5!==V.tag&&6!==V.tag&&18!==V.tag;){if(2&V.flags)continue V;if(null===V.child||4===V.tag)continue V;V.child.return=V,V=V.child}if(!(2&V.flags))return V.stateNode}}function NF(V,l,W){var U=V.tag;if(5===U||6===U)V=V.stateNode,l?8===W.nodeType?W.parentNode.insertBefore(V,l):W.insertBefore(V,l):(8===W.nodeType?(l=W.parentNode).insertBefore(V,W):(l=W).appendChild(V),null!=(W=W._reactRootContainer)||null!==l.onclick||(l.onclick=$U));else if(4!==U&&null!==(V=V.child))for(NF(V,l,W),V=V.sibling;null!==V;)NF(V,l,W),V=V.sibling}function FF(V,l,W){var U=V.tag;if(5===U||6===U)V=V.stateNode,l?W.insertBefore(V,l):W.appendChild(V);else if(4!==U&&null!==(V=V.child))for(FF(V,l,W),V=V.sibling;null!==V;)FF(V,l,W),V=V.sibling}var TF=null,aF=!1;function eF(V,l,W){for(W=W.child;null!==W;)tF(V,l,W),W=W.sibling}function tF(V,l,W){if(dl&&"function"==typeof dl.onCommitFiberUnmount)try{dl.onCommitFiberUnmount(Rl,W)}catch(V){}switch(W.tag){case 5:PN||_N(W,l);case 6:var U=TF,Z=aF;TF=null,eF(V,l,W),aF=Z,null!==(TF=U)&&(aF?(V=TF,W=W.stateNode,8===V.nodeType?V.parentNode.removeChild(W):V.removeChild(W)):TF.removeChild(W.stateNode));break;case 18:null!==TF&&(aF?(V=TF,W=W.stateNode,8===V.nodeType?FZ(V.parentNode,W):1===V.nodeType&&FZ(V,W),Ol(V)):FZ(TF,W.stateNode));break;case 4:U=TF,Z=aF,TF=W.stateNode.containerInfo,aF=!0,eF(V,l,W),TF=U,aF=Z;break;case 0:case 11:case 14:case 15:if(!PN&&(null!==(U=W.updateQueue)&&null!==(U=U.lastEffect))){Z=U=U.next;do{var R=Z,d=R.destroy;R=R.tag,void 0!==d&&(2&R||4&R)&&$N(W,l,d),Z=Z.next}while(Z!==U)}eF(V,l,W);break;case 1:if(!PN&&(_N(W,l),"function"==typeof(U=W.stateNode).componentWillUnmount))try{U.props=W.memoizedProps,U.state=W.memoizedState,U.componentWillUnmount()}catch(V){sT(W,l,V)}eF(V,l,W);break;case 21:eF(V,l,W);break;case 22:1&W.mode?(PN=(U=PN)||null!==W.memoizedState,eF(V,l,W),PN=U):eF(V,l,W);break;default:eF(V,l,W)}}function nF(V){var l=V.updateQueue;if(null!==l){V.updateQueue=null;var W=V.stateNode;null===W&&(W=V.stateNode=new AN),l.forEach((function(l){var U=XT.bind(null,V,l);W.has(l)||(W.add(l),l.then(U,U))}))}}function MF(V,l){var U=l.deletions;if(null!==U)for(var Z=0;Z<U.length;Z++){var R=U[Z];try{var d=V,N=l,F=N;V:for(;null!==F;){switch(F.tag){case 5:TF=F.stateNode,aF=!1;break V;case 3:case 4:TF=F.stateNode.containerInfo,aF=!0;break V}F=F.return}if(null===TF)throw Error(W(160));tF(d,N,R),TF=null,aF=!1;var T=R.alternate;null!==T&&(T.return=null),R.return=null}catch(V){sT(R,l,V)}}if(12854&l.subtreeFlags)for(l=l.child;null!==l;)kF(l,V),l=l.sibling}function kF(V,l){var U=V.alternate,Z=V.flags;switch(V.tag){case 0:case 11:case 14:case 15:if(MF(l,V),mF(V),4&Z){try{lF(3,V,V.return),WF(3,V)}catch(l){sT(V,V.return,l)}try{lF(5,V,V.return)}catch(l){sT(V,V.return,l)}}break;case 1:MF(l,V),mF(V),512&Z&&null!==U&&_N(U,U.return);break;case 5:if(MF(l,V),mF(V),512&Z&&null!==U&&_N(U,U.return),32&V.flags){var R=V.stateNode;try{nV(R,"")}catch(l){sT(V,V.return,l)}}if(4&Z&&null!=(R=V.stateNode)){var d=V.memoizedProps,N=null!==U?U.memoizedProps:d,F=V.type,T=V.updateQueue;if(V.updateQueue=null,null!==T)try{"input"===F&&"radio"===d.type&&null!=d.name&&_(R,d),SV(F,N);var a=SV(F,d);for(N=0;N<T.length;N+=2){var e=T[N],t=T[N+1];"style"===e?cV(R,t):"dangerouslySetInnerHTML"===e?tV(R,t):"children"===e?nV(R,t):S(R,e,t,a)}switch(F){case"input":$(R,d);break;case"textarea":dV(R,d);break;case"select":var n=R._wrapperState.wasMultiple;R._wrapperState.wasMultiple=!!d.multiple;var M=d.value;null!=M?UV(R,!!d.multiple,M,!1):n!==!!d.multiple&&(null!=d.defaultValue?UV(R,!!d.multiple,d.defaultValue,!0):UV(R,!!d.multiple,d.multiple?[]:"",!1))}R[nZ]=d}catch(l){sT(V,V.return,l)}}break;case 6:if(MF(l,V),mF(V),4&Z){if(null===V.stateNode)throw Error(W(162));R=V.stateNode,d=V.memoizedProps;try{R.nodeValue=d}catch(l){sT(V,V.return,l)}}break;case 3:if(MF(l,V),mF(V),4&Z&&null!==U&&U.memoizedState.isDehydrated)try{Ol(l.containerInfo)}catch(l){sT(V,V.return,l)}break;case 4:default:MF(l,V),mF(V);break;case 13:MF(l,V),mF(V),8192&(R=V.child).flags&&(d=null!==R.memoizedState,R.stateNode.isHidden=d,!d||null!==R.alternate&&null!==R.alternate.memoizedState||(CF=_V())),4&Z&&nF(V);break;case 22:if(e=null!==U&&null!==U.memoizedState,1&V.mode?(PN=(a=PN)||e,MF(l,V),PN=a):MF(l,V),mF(V),8192&Z){if(a=null!==V.memoizedState,(V.stateNode.isHidden=a)&&!e&&1&V.mode)for(qN=V,e=V.child;null!==e;){for(t=qN=e;null!==qN;){switch(M=(n=qN).child,n.tag){case 0:case 11:case 14:case 15:lF(4,n,n.return);break;case 1:_N(n,n.return);var k=n.stateNode;if("function"==typeof k.componentWillUnmount){Z=n,U=n.return;try{l=Z,k.props=l.memoizedProps,k.state=l.memoizedState,k.componentWillUnmount()}catch(V){sT(Z,U,V)}}break;case 5:_N(n,n.return);break;case 22:if(null!==n.memoizedState){SF(t);continue}}null!==M?(M.return=n,qN=M):SF(t)}e=e.sibling}V:for(e=null,t=V;;){if(5===t.tag){if(null===e){e=t;try{R=t.stateNode,a?"function"==typeof(d=R.style).setProperty?d.setProperty("display","none","important"):d.display="none":(F=t.stateNode,N=null!=(T=t.memoizedProps.style)&&T.hasOwnProperty("display")?T.display:null,F.style.display=mV("display",N))}catch(l){sT(V,V.return,l)}}}else if(6===t.tag){if(null===e)try{t.stateNode.nodeValue=a?"":t.memoizedProps}catch(l){sT(V,V.return,l)}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===V)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===V)break V;for(;null===t.sibling;){if(null===t.return||t.return===V)break V;e===t&&(e=null),t=t.return}e===t&&(e=null),t.sibling.return=t.return,t=t.sibling}}break;case 19:MF(l,V),mF(V),4&Z&&nF(V);case 21:}}function mF(V){var l=V.flags;if(2&l){try{V:{for(var U=V.return;null!==U;){if(RF(U)){var Z=U;break V}U=U.return}throw Error(W(160))}switch(Z.tag){case 5:var R=Z.stateNode;32&Z.flags&&(nV(R,""),Z.flags&=-33),FF(V,dF(V),R);break;case 3:case 4:var d=Z.stateNode.containerInfo;NF(V,dF(V),d);break;default:throw Error(W(161))}}catch(l){sT(V,V.return,l)}V.flags&=-3}4096&l&&(V.flags&=-4097)}function cF(V,l,W){qN=V,pF(V)}function pF(V,l,W){for(var U=!!(1&V.mode);null!==qN;){var Z=qN,R=Z.child;if(22===Z.tag&&U){var d=null!==Z.memoizedState||fN;if(!d){var N=Z.alternate,F=null!==N&&null!==N.memoizedState||PN;N=fN;var T=PN;if(fN=d,(PN=F)&&!T)for(qN=Z;null!==qN;)F=(d=qN).child,22===d.tag&&null!==d.memoizedState?EF(Z):null!==F?(F.return=d,qN=F):EF(Z);for(;null!==R;)qN=R,pF(R),R=R.sibling;qN=Z,fN=N,PN=T}bF(V)}else 8772&Z.subtreeFlags&&null!==R?(R.return=Z,qN=R):bF(V)}}function bF(V){for(;null!==qN;){var l=qN;if(8772&l.flags){var U=l.alternate;try{if(8772&l.flags)switch(l.tag){case 0:case 11:case 15:PN||WF(5,l);break;case 1:var Z=l.stateNode;if(4&l.flags&&!PN)if(null===U)Z.componentDidMount();else{var R=l.elementType===l.type?U.memoizedProps:lN(l.type,U.memoizedProps);Z.componentDidUpdate(R,U.memoizedState,Z.__reactInternalSnapshotBeforeUpdate)}var d=l.updateQueue;null!==d&&OR(l,d,Z);break;case 3:var N=l.updateQueue;if(null!==N){if(U=null,null!==l.child)switch(l.child.tag){case 5:case 1:U=l.child.stateNode}OR(l,N,U)}break;case 5:var F=l.stateNode;if(null===U&&4&l.flags){U=F;var T=l.memoizedProps;switch(l.type){case"button":case"input":case"select":case"textarea":T.autoFocus&&U.focus();break;case"img":T.src&&(U.src=T.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===l.memoizedState){var a=l.alternate;if(null!==a){var e=a.memoizedState;if(null!==e){var t=e.dehydrated;null!==t&&Ol(t)}}}break;default:throw Error(W(163))}PN||512&l.flags&&UF(l)}catch(V){sT(l,l.return,V)}}if(l===V){qN=null;break}if(null!==(U=l.sibling)){U.return=l.return,qN=U;break}qN=l.return}}function SF(V){for(;null!==qN;){var l=qN;if(l===V){qN=null;break}var W=l.sibling;if(null!==W){W.return=l.return,qN=W;break}qN=l.return}}function EF(V){for(;null!==qN;){var l=qN;try{switch(l.tag){case 0:case 11:case 15:var W=l.return;try{WF(4,l)}catch(V){sT(l,W,V)}break;case 1:var U=l.stateNode;if("function"==typeof U.componentDidMount){var Z=l.return;try{U.componentDidMount()}catch(V){sT(l,Z,V)}}var R=l.return;try{UF(l)}catch(V){sT(l,R,V)}break;case 5:var d=l.return;try{UF(l)}catch(V){sT(l,d,V)}}}catch(V){sT(l,l.return,V)}if(l===V){qN=null;break}var N=l.sibling;if(null!==N){N.return=l.return,qN=N;break}qN=l.return}}var hF,sF=Math.ceil,YF=E.ReactCurrentDispatcher,JF=E.ReactCurrentOwner,GF=E.ReactCurrentBatchConfig,XF=0,iF=null,xF=null,rF=0,QF=0,zF=YZ(0),oF=0,uF=null,wF=0,yF=0,jF=0,BF=null,DF=null,CF=0,HF=1/0,IF=null,OF=!1,LF=null,KF=null,gF=!1,vF=null,fF=0,PF=0,AF=null,qF=-1,_F=0;function $F(){return 6&XF?_V():-1!==qF?qF:qF=_V()}function VT(V){return 1&V.mode?2&XF&&0!==rF?rF&-rF:null!==kR.transition?(0===_F&&(_F=ml()),_F):0!==(V=Sl)?V:V=void 0===(V=window.event)?16:ql(V.type):1}function lT(V,l,U,Z){if(50<PF)throw PF=0,AF=null,Error(W(185));pl(V,U,Z),2&XF&&V===iF||(V===iF&&(!(2&XF)&&(yF|=U),4===oF&&dT(V,rF)),WT(V,Z),1===U&&0===XF&&!(1&l.mode)&&(HF=_V()+500,DZ&&IZ()))}function WT(V,l){var W=V.callbackNode;!function(V,l){for(var W=V.suspendedLanes,U=V.pingedLanes,Z=V.expirationTimes,R=V.pendingLanes;0<R;){var d=31-Nl(R),N=1<<d,F=Z[d];-1===F?N&W&&!(N&U)||(Z[d]=Ml(N,l)):F<=l&&(V.expiredLanes|=N),R&=~N}}(V,l);var U=nl(V,V===iF?rF:0);if(0===U)null!==W&&PV(W),V.callbackNode=null,V.callbackPriority=0;else if(l=U&-U,V.callbackPriority!==l){if(null!=W&&PV(W),1===l)0===V.tag?function(V){DZ=!0,HZ(V)}(NT.bind(null,V)):HZ(NT.bind(null,V)),dZ((function(){!(6&XF)&&IZ()})),W=null;else{switch(El(U)){case 1:W=Vl;break;case 4:W=ll;break;case 16:default:W=Wl;break;case 536870912:W=Zl}W=iT(W,UT.bind(null,V))}V.callbackPriority=l,V.callbackNode=W}}function UT(V,l){if(qF=-1,_F=0,6&XF)throw Error(W(327));var U=V.callbackNode;if(ET()&&V.callbackNode!==U)return null;var Z=nl(V,V===iF?rF:0);if(0===Z)return null;if(30&Z||Z&V.expiredLanes||l)l=kT(V,Z);else{l=Z;var R=XF;XF|=2;var d=nT();for(iF===V&&rF===l||(IF=null,HF=_V()+500,eT(V,l));;)try{cT();break}catch(l){tT(V,l)}GR(),YF.current=d,XF=R,null!==xF?l=0:(iF=null,rF=0,l=oF)}if(0!==l){if(2===l&&(0!==(R=kl(V))&&(Z=R,l=ZT(V,R))),1===l)throw U=uF,eT(V,0),dT(V,Z),WT(V,_V()),U;if(6===l)dT(V,Z);else{if(R=V.current.alternate,!(30&Z||function(V){for(var l=V;;){if(16384&l.flags){var W=l.updateQueue;if(null!==W&&null!==(W=W.stores))for(var U=0;U<W.length;U++){var Z=W[U],R=Z.getSnapshot;Z=Z.value;try{if(!NU(R(),Z))return!1}catch(V){return!1}}}if(W=l.child,16384&l.subtreeFlags&&null!==W)W.return=l,l=W;else{if(l===V)break;for(;null===l.sibling;){if(null===l.return||l.return===V)return!0;l=l.return}l.sibling.return=l.return,l=l.sibling}}return!0}(R)||(l=kT(V,Z),2===l&&(d=kl(V),0!==d&&(Z=d,l=ZT(V,d))),1!==l)))throw U=uF,eT(V,0),dT(V,Z),WT(V,_V()),U;switch(V.finishedWork=R,V.finishedLanes=Z,l){case 0:case 1:throw Error(W(345));case 2:case 5:ST(V,DF,IF);break;case 3:if(dT(V,Z),(130023424&Z)===Z&&10<(l=CF+500-_V())){if(0!==nl(V,0))break;if(((R=V.suspendedLanes)&Z)!==Z){$F(),V.pingedLanes|=V.suspendedLanes&R;break}V.timeoutHandle=UZ(ST.bind(null,V,DF,IF),l);break}ST(V,DF,IF);break;case 4:if(dT(V,Z),(4194240&Z)===Z)break;for(l=V.eventTimes,R=-1;0<Z;){var N=31-Nl(Z);d=1<<N,(N=l[N])>R&&(R=N),Z&=~d}if(Z=R,10<(Z=(120>(Z=_V()-Z)?120:480>Z?480:1080>Z?1080:1920>Z?1920:3e3>Z?3e3:4320>Z?4320:1960*sF(Z/1960))-Z)){V.timeoutHandle=UZ(ST.bind(null,V,DF,IF),Z);break}ST(V,DF,IF);break;default:throw Error(W(329))}}}return WT(V,_V()),V.callbackNode===U?UT.bind(null,V):null}function ZT(V,l){var W=BF;return V.current.memoizedState.isDehydrated&&(eT(V,l).flags|=256),2!==(V=kT(V,l))&&(l=DF,DF=W,null!==l&&RT(l)),V}function RT(V){null===DF?DF=V:DF.push.apply(DF,V)}function dT(V,l){for(l&=~jF,l&=~yF,V.suspendedLanes|=l,V.pingedLanes&=~l,V=V.expirationTimes;0<l;){var W=31-Nl(l),U=1<<W;V[W]=-1,l&=~U}}function NT(V){if(6&XF)throw Error(W(327));ET();var l=nl(V,0);if(!(1&l))return WT(V,_V()),null;var U=kT(V,l);if(0!==V.tag&&2===U){var Z=kl(V);0!==Z&&(l=Z,U=ZT(V,Z))}if(1===U)throw U=uF,eT(V,0),dT(V,l),WT(V,_V()),U;if(6===U)throw Error(W(345));return V.finishedWork=V.current.alternate,V.finishedLanes=l,ST(V,DF,IF),WT(V,_V()),null}function FT(V,l){var W=XF;XF|=1;try{return V(l)}finally{0===(XF=W)&&(HF=_V()+500,DZ&&IZ())}}function TT(V){null!==vF&&0===vF.tag&&!(6&XF)&&ET();var l=XF;XF|=1;var W=GF.transition,U=Sl;try{if(GF.transition=null,Sl=1,V)return V()}finally{Sl=U,GF.transition=W,!(6&(XF=l))&&IZ()}}function aT(){QF=zF.current,JZ(zF)}function eT(V,l){V.finishedWork=null,V.finishedLanes=0;var W=V.timeoutHandle;if(-1!==W&&(V.timeoutHandle=-1,ZZ(W)),null!==xF)for(W=xF.return;null!==W;){var U=W;switch(lR(U),U.tag){case 1:null!=(U=U.type.childContextTypes)&&oZ();break;case 3:AR(),JZ(xZ),JZ(iZ),Wd();break;case 5:_R(U);break;case 4:AR();break;case 13:case 19:JZ($R);break;case 10:XR(U.type._context);break;case 22:case 23:aT()}W=W.return}if(iF=V,xF=V=zT(V.current,null),rF=QF=l,oF=0,uF=null,jF=yF=wF=0,DF=BF=null,null!==QR){for(l=0;l<QR.length;l++)if(null!==(U=(W=QR[l]).interleaved)){W.interleaved=null;var Z=U.next,R=W.pending;if(null!==R){var d=R.next;R.next=Z,U.next=d}W.pending=U}QR=null}return V}function tT(V,l){for(;;){var U=xF;try{if(GR(),Ud.current=qd,Td){for(var Z=dd.memoizedState;null!==Z;){var R=Z.queue;null!==R&&(R.pending=null),Z=Z.next}Td=!1}if(Rd=0,Fd=Nd=dd=null,ad=!1,ed=0,JF.current=null,null===U||null===U.return){oF=1,uF=l,xF=null;break}V:{var d=V,N=U.return,F=U,T=l;if(l=rF,F.flags|=32768,null!==T&&"object"==typeof T&&"function"==typeof T.then){var a=T,e=F,t=e.tag;if(!(1&e.mode||0!==t&&11!==t&&15!==t)){var n=e.alternate;n?(e.updateQueue=n.updateQueue,e.memoizedState=n.memoizedState,e.lanes=n.lanes):(e.updateQueue=null,e.memoizedState=null)}var M=kN(N);if(null!==M){M.flags&=-257,mN(M,N,F,0,l),1&M.mode&&MN(d,a,l),T=a;var k=(l=M).updateQueue;if(null===k){var m=new Set;m.add(T),l.updateQueue=m}else k.add(T);break V}if(!(1&l)){MN(d,a,l),MT();break V}T=Error(W(426))}else if(ZR&&1&F.mode){var c=kN(N);if(null!==c){!(65536&c.flags)&&(c.flags|=256),mN(c,N,F,0,l),MR(FN(T,F));break V}}d=T=FN(T,F),4!==oF&&(oF=2),null===BF?BF=[d]:BF.push(d),d=N;do{switch(d.tag){case 3:d.flags|=65536,l&=-l,d.lanes|=l,HR(d,tN(0,T,l));break V;case 1:F=T;var p=d.type,b=d.stateNode;if(!(128&d.flags||"function"!=typeof p.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==KF&&KF.has(b)))){d.flags|=65536,l&=-l,d.lanes|=l,HR(d,nN(d,F,l));break V}}d=d.return}while(null!==d)}bT(U)}catch(V){l=V,xF===U&&null!==U&&(xF=U=U.return);continue}break}}function nT(){var V=YF.current;return YF.current=qd,null===V?qd:V}function MT(){0!==oF&&3!==oF&&2!==oF||(oF=4),null===iF||!(268435455&wF)&&!(268435455&yF)||dT(iF,rF)}function kT(V,l){var U=XF;XF|=2;var Z=nT();for(iF===V&&rF===l||(IF=null,eT(V,l));;)try{mT();break}catch(l){tT(V,l)}if(GR(),XF=U,YF.current=Z,null!==xF)throw Error(W(261));return iF=null,rF=0,oF}function mT(){for(;null!==xF;)pT(xF)}function cT(){for(;null!==xF&&!AV();)pT(xF)}function pT(V){var l=hF(V.alternate,V,QF);V.memoizedProps=V.pendingProps,null===l?bT(V):xF=l,JF.current=null}function bT(V){var l=V;do{var W=l.alternate;if(V=l.return,32768&l.flags){if(null!==(W=vN(W,l)))return W.flags&=32767,void(xF=W);if(null===V)return oF=6,void(xF=null);V.flags|=32768,V.subtreeFlags=0,V.deletions=null}else if(null!==(W=gN(W,l,QF)))return void(xF=W);if(null!==(l=l.sibling))return void(xF=l);xF=l=V}while(null!==l);0===oF&&(oF=5)}function ST(V,l,U){var Z=Sl,R=GF.transition;try{GF.transition=null,Sl=1,function(V,l,U,Z){do{ET()}while(null!==vF);if(6&XF)throw Error(W(327));U=V.finishedWork;var R=V.finishedLanes;if(null===U)return null;if(V.finishedWork=null,V.finishedLanes=0,U===V.current)throw Error(W(177));V.callbackNode=null,V.callbackPriority=0;var d=U.lanes|U.childLanes;if(function(V,l){var W=V.pendingLanes&~l;V.pendingLanes=l,V.suspendedLanes=0,V.pingedLanes=0,V.expiredLanes&=l,V.mutableReadLanes&=l,V.entangledLanes&=l,l=V.entanglements;var U=V.eventTimes;for(V=V.expirationTimes;0<W;){var Z=31-Nl(W),R=1<<Z;l[Z]=0,U[Z]=-1,V[Z]=-1,W&=~R}}(V,d),V===iF&&(xF=iF=null,rF=0),!(2064&U.subtreeFlags)&&!(2064&U.flags)||gF||(gF=!0,iT(Wl,(function(){return ET(),null}))),d=!!(15990&U.flags),!!(15990&U.subtreeFlags)||d){d=GF.transition,GF.transition=null;var N=Sl;Sl=1;var F=XF;XF|=4,JF.current=null,function(V,l){if(VZ=Kl,nU(V=tU())){if("selectionStart"in V)var U={start:V.selectionStart,end:V.selectionEnd};else V:{var Z=(U=(U=V.ownerDocument)&&U.defaultView||window).getSelection&&U.getSelection();if(Z&&0!==Z.rangeCount){U=Z.anchorNode;var R=Z.anchorOffset,d=Z.focusNode;Z=Z.focusOffset;try{U.nodeType,d.nodeType}catch(V){U=null;break V}var N=0,F=-1,T=-1,a=0,e=0,t=V,n=null;l:for(;;){for(var M;t!==U||0!==R&&3!==t.nodeType||(F=N+R),t!==d||0!==Z&&3!==t.nodeType||(T=N+Z),3===t.nodeType&&(N+=t.nodeValue.length),null!==(M=t.firstChild);)n=t,t=M;for(;;){if(t===V)break l;if(n===U&&++a===R&&(F=N),n===d&&++e===Z&&(T=N),null!==(M=t.nextSibling))break;n=(t=n).parentNode}t=M}U=-1===F||-1===T?null:{start:F,end:T}}else U=null}U=U||{start:0,end:0}}else U=null;for(lZ={focusedElem:V,selectionRange:U},Kl=!1,qN=l;null!==qN;)if(V=(l=qN).child,1028&l.subtreeFlags&&null!==V)V.return=l,qN=V;else for(;null!==qN;){l=qN;try{var k=l.alternate;if(1024&l.flags)switch(l.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==k){var m=k.memoizedProps,c=k.memoizedState,p=l.stateNode,b=p.getSnapshotBeforeUpdate(l.elementType===l.type?m:lN(l.type,m),c);p.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var S=l.stateNode.containerInfo;1===S.nodeType?S.textContent="":9===S.nodeType&&S.documentElement&&S.removeChild(S.documentElement);break;default:throw Error(W(163))}}catch(V){sT(l,l.return,V)}if(null!==(V=l.sibling)){V.return=l.return,qN=V;break}qN=l.return}k=VF,VF=!1}(V,U),kF(U,V),MU(lZ),Kl=!!VZ,lZ=VZ=null,V.current=U,cF(U),qV(),XF=F,Sl=N,GF.transition=d}else V.current=U;if(gF&&(gF=!1,vF=V,fF=R),d=V.pendingLanes,0===d&&(KF=null),function(V){if(dl&&"function"==typeof dl.onCommitFiberRoot)try{dl.onCommitFiberRoot(Rl,V,void 0,!(128&~V.current.flags))}catch(V){}}(U.stateNode),WT(V,_V()),null!==l)for(Z=V.onRecoverableError,U=0;U<l.length;U++)R=l[U],Z(R.value,{componentStack:R.stack,digest:R.digest});if(OF)throw OF=!1,V=LF,LF=null,V;!!(1&fF)&&0!==V.tag&&ET(),d=V.pendingLanes,1&d?V===AF?PF++:(PF=0,AF=V):PF=0,IZ()}(V,l,U,Z)}finally{GF.transition=R,Sl=Z}return null}function ET(){if(null!==vF){var V=El(fF),l=GF.transition,U=Sl;try{if(GF.transition=null,Sl=16>V?16:V,null===vF)var Z=!1;else{if(V=vF,vF=null,fF=0,6&XF)throw Error(W(331));var R=XF;for(XF|=4,qN=V.current;null!==qN;){var d=qN,N=d.child;if(16&qN.flags){var F=d.deletions;if(null!==F){for(var T=0;T<F.length;T++){var a=F[T];for(qN=a;null!==qN;){var e=qN;switch(e.tag){case 0:case 11:case 15:lF(8,e,d)}var t=e.child;if(null!==t)t.return=e,qN=t;else for(;null!==qN;){var n=(e=qN).sibling,M=e.return;if(ZF(e),e===a){qN=null;break}if(null!==n){n.return=M,qN=n;break}qN=M}}}var k=d.alternate;if(null!==k){var m=k.child;if(null!==m){k.child=null;do{var c=m.sibling;m.sibling=null,m=c}while(null!==m)}}qN=d}}if(2064&d.subtreeFlags&&null!==N)N.return=d,qN=N;else V:for(;null!==qN;){if(2048&(d=qN).flags)switch(d.tag){case 0:case 11:case 15:lF(9,d,d.return)}var p=d.sibling;if(null!==p){p.return=d.return,qN=p;break V}qN=d.return}}var b=V.current;for(qN=b;null!==qN;){var S=(N=qN).child;if(2064&N.subtreeFlags&&null!==S)S.return=N,qN=S;else V:for(N=b;null!==qN;){if(2048&(F=qN).flags)try{switch(F.tag){case 0:case 11:case 15:WF(9,F)}}catch(V){sT(F,F.return,V)}if(F===N){qN=null;break V}var E=F.sibling;if(null!==E){E.return=F.return,qN=E;break V}qN=F.return}}if(XF=R,IZ(),dl&&"function"==typeof dl.onPostCommitFiberRoot)try{dl.onPostCommitFiberRoot(Rl,V)}catch(V){}Z=!0}return Z}finally{Sl=U,GF.transition=l}}return!1}function hT(V,l,W){V=DR(V,l=tN(0,l=FN(W,l),1),1),l=$F(),null!==V&&(pl(V,1,l),WT(V,l))}function sT(V,l,W){if(3===V.tag)hT(V,V,W);else for(;null!==l;){if(3===l.tag){hT(l,V,W);break}if(1===l.tag){var U=l.stateNode;if("function"==typeof l.type.getDerivedStateFromError||"function"==typeof U.componentDidCatch&&(null===KF||!KF.has(U))){l=DR(l,V=nN(l,V=FN(W,V),1),1),V=$F(),null!==l&&(pl(l,1,V),WT(l,V));break}}l=l.return}}function YT(V,l,W){var U=V.pingCache;null!==U&&U.delete(l),l=$F(),V.pingedLanes|=V.suspendedLanes&W,iF===V&&(rF&W)===W&&(4===oF||3===oF&&(130023424&rF)===rF&&500>_V()-CF?eT(V,0):jF|=W),WT(V,l)}function JT(V,l){0===l&&(1&V.mode?(l=el,!(130023424&(el<<=1))&&(el=4194304)):l=1);var W=$F();null!==(V=uR(V,l))&&(pl(V,l,W),WT(V,W))}function GT(V){var l=V.memoizedState,W=0;null!==l&&(W=l.retryLane),JT(V,W)}function XT(V,l){var U=0;switch(V.tag){case 13:var Z=V.stateNode,R=V.memoizedState;null!==R&&(U=R.retryLane);break;case 19:Z=V.stateNode;break;default:throw Error(W(314))}null!==Z&&Z.delete(l),JT(V,U)}function iT(V,l){return fV(V,l)}function xT(V,l,W,U){this.tag=V,this.key=W,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=l,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=U,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function rT(V,l,W,U){return new xT(V,l,W,U)}function QT(V){return!(!(V=V.prototype)||!V.isReactComponent)}function zT(V,l){var W=V.alternate;return null===W?((W=rT(V.tag,l,V.key,V.mode)).elementType=V.elementType,W.type=V.type,W.stateNode=V.stateNode,W.alternate=V,V.alternate=W):(W.pendingProps=l,W.type=V.type,W.flags=0,W.subtreeFlags=0,W.deletions=null),W.flags=14680064&V.flags,W.childLanes=V.childLanes,W.lanes=V.lanes,W.child=V.child,W.memoizedProps=V.memoizedProps,W.memoizedState=V.memoizedState,W.updateQueue=V.updateQueue,l=V.dependencies,W.dependencies=null===l?null:{lanes:l.lanes,firstContext:l.firstContext},W.sibling=V.sibling,W.index=V.index,W.ref=V.ref,W}function oT(V,l,U,Z,R,d){var N=2;if(Z=V,"function"==typeof V)QT(V)&&(N=1);else if("string"==typeof V)N=5;else V:switch(V){case Y:return uT(U.children,R,d,l);case J:N=8,R|=8;break;case G:return(V=rT(12,U,l,2|R)).elementType=G,V.lanes=d,V;case r:return(V=rT(13,U,l,R)).elementType=r,V.lanes=d,V;case Q:return(V=rT(19,U,l,R)).elementType=Q,V.lanes=d,V;case u:return wT(U,R,d,l);default:if("object"==typeof V&&null!==V)switch(V.$$typeof){case X:N=10;break V;case i:N=9;break V;case x:N=11;break V;case z:N=14;break V;case o:N=16,Z=null;break V}throw Error(W(130,null==V?V:typeof V,""))}return(l=rT(N,U,l,R)).elementType=V,l.type=Z,l.lanes=d,l}function uT(V,l,W,U){return(V=rT(7,V,U,l)).lanes=W,V}function wT(V,l,W,U){return(V=rT(22,V,U,l)).elementType=u,V.lanes=W,V.stateNode={isHidden:!1},V}function yT(V,l,W){return(V=rT(6,V,null,l)).lanes=W,V}function jT(V,l,W){return(l=rT(4,null!==V.children?V.children:[],V.key,l)).lanes=W,l.stateNode={containerInfo:V.containerInfo,pendingChildren:null,implementation:V.implementation},l}function BT(V,l,W,U,Z){this.tag=l,this.containerInfo=V,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=cl(0),this.expirationTimes=cl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=cl(0),this.identifierPrefix=U,this.onRecoverableError=Z,this.mutableSourceEagerHydrationData=null}function DT(V,l,W,U,Z,R,d,N,F){return V=new BT(V,l,W,N,F),1===l?(l=1,!0===R&&(l|=8)):l=0,R=rT(3,null,null,l),V.current=R,R.stateNode=V,R.memoizedState={element:U,isDehydrated:W,cache:null,transitions:null,pendingSuspenseBoundaries:null},yR(R),V}function CT(V){if(!V)return XZ;V:{if(OV(V=V._reactInternals)!==V||1!==V.tag)throw Error(W(170));var l=V;do{switch(l.tag){case 3:l=l.stateNode.context;break V;case 1:if(zZ(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break V}}l=l.return}while(null!==l);throw Error(W(171))}if(1===V.tag){var U=V.type;if(zZ(U))return wZ(V,U,l)}return l}function HT(V,l,W,U,Z,R,d,N,F){return(V=DT(W,U,!0,V,0,R,0,N,F)).context=CT(null),W=V.current,(R=BR(U=$F(),Z=VT(W))).callback=null!=l?l:null,DR(W,R,Z),V.current.lanes=Z,pl(V,Z,U),WT(V,U),V}function IT(V,l,W,U){var Z=l.current,R=$F(),d=VT(Z);return W=CT(W),null===l.context?l.context=W:l.pendingContext=W,(l=BR(R,d)).payload={element:V},null!==(U=void 0===U?null:U)&&(l.callback=U),null!==(V=DR(Z,l,d))&&(lT(V,Z,d,R),CR(V,Z,d)),d}function OT(V){return(V=V.current).child?(V.child.tag,V.child.stateNode):null}function LT(V,l){if(null!==(V=V.memoizedState)&&null!==V.dehydrated){var W=V.retryLane;V.retryLane=0!==W&&W<l?W:l}}function KT(V,l){LT(V,l),(V=V.alternate)&&LT(V,l)}hF=function(V,l,U){if(null!==V)if(V.memoizedProps!==l.pendingProps||xZ.current)pN=!0;else{if(!(V.lanes&U||128&l.flags))return pN=!1,function(V,l,W){switch(l.tag){case 3:iN(l),nR();break;case 5:qR(l);break;case 1:zZ(l.type)&&yZ(l);break;case 4:PR(l,l.stateNode.containerInfo);break;case 10:var U=l.type._context,Z=l.memoizedProps.value;GZ(hR,U._currentValue),U._currentValue=Z;break;case 13:if(null!==(U=l.memoizedState))return null!==U.dehydrated?(GZ($R,1&$R.current),l.flags|=128,null):W&l.child.childLanes?yN(V,l,W):(GZ($R,1&$R.current),null!==(V=ON(V,l,W))?V.sibling:null);GZ($R,1&$R.current);break;case 19:if(U=!!(W&l.childLanes),128&V.flags){if(U)return HN(V,l,W);l.flags|=128}if(null!==(Z=l.memoizedState)&&(Z.rendering=null,Z.tail=null,Z.lastEffect=null),GZ($R,$R.current),U)break;return null;case 22:case 23:return l.lanes=0,sN(V,l,W)}return ON(V,l,W)}(V,l,U);pN=!!(131072&V.flags)}else pN=!1,ZR&&1048576&l.flags&&$Z(l,gZ,l.index);switch(l.lanes=0,l.tag){case 2:var Z=l.type;IN(V,l),V=l.pendingProps;var R=QZ(l,iZ.current);xR(l,U),R=kd(null,l,Z,V,R,U);var d=md();return l.flags|=1,"object"==typeof R&&null!==R&&"function"==typeof R.render&&void 0===R.$$typeof?(l.tag=1,l.memoizedState=null,l.updateQueue=null,zZ(Z)?(d=!0,yZ(l)):d=!1,l.memoizedState=null!==R.state&&void 0!==R.state?R.state:null,yR(l),R.updater=UN,l.stateNode=R,R._reactInternals=l,NN(l,Z,V,U),l=XN(null,l,Z,!0,d,U)):(l.tag=0,ZR&&d&&VR(l),bN(null,l,R,U),l=l.child),l;case 16:Z=l.elementType;V:{switch(IN(V,l),V=l.pendingProps,Z=(R=Z._init)(Z._payload),l.type=Z,R=l.tag=function(V){if("function"==typeof V)return QT(V)?1:0;if(null!=V){if((V=V.$$typeof)===x)return 11;if(V===z)return 14}return 2}(Z),V=lN(Z,V),R){case 0:l=JN(null,l,Z,V,U);break V;case 1:l=GN(null,l,Z,V,U);break V;case 11:l=SN(null,l,Z,V,U);break V;case 14:l=EN(null,l,Z,lN(Z.type,V),U);break V}throw Error(W(306,Z,""))}return l;case 0:return Z=l.type,R=l.pendingProps,JN(V,l,Z,R=l.elementType===Z?R:lN(Z,R),U);case 1:return Z=l.type,R=l.pendingProps,GN(V,l,Z,R=l.elementType===Z?R:lN(Z,R),U);case 3:V:{if(iN(l),null===V)throw Error(W(387));Z=l.pendingProps,R=(d=l.memoizedState).element,jR(V,l),IR(l,Z,null,U);var N=l.memoizedState;if(Z=N.element,d.isDehydrated){if(d={element:Z,isDehydrated:!1,cache:N.cache,pendingSuspenseBoundaries:N.pendingSuspenseBoundaries,transitions:N.transitions},l.updateQueue.baseState=d,l.memoizedState=d,256&l.flags){l=xN(V,l,Z,U,R=FN(Error(W(423)),l));break V}if(Z!==R){l=xN(V,l,Z,U,R=FN(Error(W(424)),l));break V}for(UR=TZ(l.stateNode.containerInfo.firstChild),WR=l,ZR=!0,RR=null,U=ER(l,null,Z,U),l.child=U;U;)U.flags=-3&U.flags|4096,U=U.sibling}else{if(nR(),Z===R){l=ON(V,l,U);break V}bN(V,l,Z,U)}l=l.child}return l;case 5:return qR(l),null===V&&TR(l),Z=l.type,R=l.pendingProps,d=null!==V?V.memoizedProps:null,N=R.children,WZ(Z,R)?N=null:null!==d&&WZ(Z,d)&&(l.flags|=32),YN(V,l),bN(V,l,N,U),l.child;case 6:return null===V&&TR(l),null;case 13:return yN(V,l,U);case 4:return PR(l,l.stateNode.containerInfo),Z=l.pendingProps,null===V?l.child=SR(l,null,Z,U):bN(V,l,Z,U),l.child;case 11:return Z=l.type,R=l.pendingProps,SN(V,l,Z,R=l.elementType===Z?R:lN(Z,R),U);case 7:return bN(V,l,l.pendingProps,U),l.child;case 8:case 12:return bN(V,l,l.pendingProps.children,U),l.child;case 10:V:{if(Z=l.type._context,R=l.pendingProps,d=l.memoizedProps,N=R.value,GZ(hR,Z._currentValue),Z._currentValue=N,null!==d)if(NU(d.value,N)){if(d.children===R.children&&!xZ.current){l=ON(V,l,U);break V}}else for(null!==(d=l.child)&&(d.return=l);null!==d;){var F=d.dependencies;if(null!==F){N=d.child;for(var T=F.firstContext;null!==T;){if(T.context===Z){if(1===d.tag){(T=BR(-1,U&-U)).tag=2;var a=d.updateQueue;if(null!==a){var e=(a=a.shared).pending;null===e?T.next=T:(T.next=e.next,e.next=T),a.pending=T}}d.lanes|=U,null!==(T=d.alternate)&&(T.lanes|=U),iR(d.return,U,l),F.lanes|=U;break}T=T.next}}else if(10===d.tag)N=d.type===l.type?null:d.child;else if(18===d.tag){if(null===(N=d.return))throw Error(W(341));N.lanes|=U,null!==(F=N.alternate)&&(F.lanes|=U),iR(N,U,l),N=d.sibling}else N=d.child;if(null!==N)N.return=d;else for(N=d;null!==N;){if(N===l){N=null;break}if(null!==(d=N.sibling)){d.return=N.return,N=d;break}N=N.return}d=N}bN(V,l,R.children,U),l=l.child}return l;case 9:return R=l.type,Z=l.pendingProps.children,xR(l,U),Z=Z(R=rR(R)),l.flags|=1,bN(V,l,Z,U),l.child;case 14:return R=lN(Z=l.type,l.pendingProps),EN(V,l,Z,R=lN(Z.type,R),U);case 15:return hN(V,l,l.type,l.pendingProps,U);case 17:return Z=l.type,R=l.pendingProps,R=l.elementType===Z?R:lN(Z,R),IN(V,l),l.tag=1,zZ(Z)?(V=!0,yZ(l)):V=!1,xR(l,U),RN(l,Z,R),NN(l,Z,R,U),XN(null,l,Z,!0,V,U);case 19:return HN(V,l,U);case 22:return sN(V,l,U)}throw Error(W(156,l.tag))};var gT="function"==typeof reportError?reportError:function(V){console.error(V)};function vT(V){this._internalRoot=V}function fT(V){this._internalRoot=V}function PT(V){return!(!V||1!==V.nodeType&&9!==V.nodeType&&11!==V.nodeType)}function AT(V){return!(!V||1!==V.nodeType&&9!==V.nodeType&&11!==V.nodeType&&(8!==V.nodeType||" react-mount-point-unstable "!==V.nodeValue))}function qT(){}function _T(V,l,W,U,Z){var R=W._reactRootContainer;if(R){var d=R;if("function"==typeof Z){var N=Z;Z=function(){var V=OT(d);N.call(V)}}IT(l,d,V,Z)}else d=function(V,l,W,U,Z){if(Z){if("function"==typeof U){var R=U;U=function(){var V=OT(d);R.call(V)}}var d=HT(l,U,V,0,null,!1,0,"",qT);return V._reactRootContainer=d,V[MZ]=d.current,IU(8===V.nodeType?V.parentNode:V),TT(),d}for(;Z=V.lastChild;)V.removeChild(Z);if("function"==typeof U){var N=U;U=function(){var V=OT(F);N.call(V)}}var F=DT(V,0,!1,null,0,!1,0,"",qT);return V._reactRootContainer=F,V[MZ]=F.current,IU(8===V.nodeType?V.parentNode:V),TT((function(){IT(l,F,W,U)})),F}(W,l,V,Z,U);return OT(d)}fT.prototype.render=vT.prototype.render=function(V){var l=this._internalRoot;if(null===l)throw Error(W(409));IT(V,l,null,null)},fT.prototype.unmount=vT.prototype.unmount=function(){var V=this._internalRoot;if(null!==V){this._internalRoot=null;var l=V.containerInfo;TT((function(){IT(null,V,null,null)})),l[MZ]=null}},fT.prototype.unstable_scheduleHydration=function(V){if(V){var l=Jl();V={blockedOn:null,target:V,priority:l};for(var W=0;W<ul.length&&0!==l&&l<ul[W].priority;W++);ul.splice(W,0,V),0===W&&Bl(V)}},hl=function(V){switch(V.tag){case 3:var l=V.stateNode;if(l.current.memoizedState.isDehydrated){var W=tl(l.pendingLanes);0!==W&&(bl(l,1|W),WT(l,_V()),!(6&XF)&&(HF=_V()+500,IZ()))}break;case 13:TT((function(){var l=uR(V,1);if(null!==l){var W=$F();lT(l,V,1,W)}})),KT(V,1)}},sl=function(V){if(13===V.tag){var l=uR(V,134217728);if(null!==l)lT(l,V,134217728,$F());KT(V,134217728)}},Yl=function(V){if(13===V.tag){var l=VT(V),W=uR(V,l);if(null!==W)lT(W,V,l,$F());KT(V,l)}},Jl=function(){return Sl},Gl=function(V,l){var W=Sl;try{return Sl=V,l()}finally{Sl=W}},sV=function(V,l,U){switch(l){case"input":if($(V,U),l=U.name,"radio"===U.type&&null!=l){for(U=V;U.parentNode;)U=U.parentNode;for(U=U.querySelectorAll("input[name="+JSON.stringify(""+l)+'][type="radio"]'),l=0;l<U.length;l++){var Z=U[l];if(Z!==V&&Z.form===V.form){var R=EZ(Z);if(!R)throw Error(W(90));f(Z),$(Z,R)}}}break;case"textarea":dV(V,U);break;case"select":null!=(l=U.value)&&UV(V,!!U.multiple,l,!1)}},xV=FT,rV=TT;var $T={usingClientEntryPoint:!1,Events:[bZ,SZ,EZ,XV,iV,FT]},Va={findFiberByHostInstance:pZ,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},la={bundleType:Va.bundleType,version:Va.version,rendererPackageName:Va.rendererPackageName,rendererConfig:Va.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(V){return null===(V=gV(V))?null:V.stateNode},findFiberByHostInstance:Va.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Wa=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Wa.isDisabled&&Wa.supportsFiber)try{Rl=Wa.inject(la),dl=Wa}catch(eV){}}return m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=$T,m.createPortal=function(V,l){var U=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!PT(l))throw Error(W(200));return function(V,l,W){var U=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:s,key:null==U?null:""+U,children:V,containerInfo:l,implementation:W}}(V,l,null,U)},m.createRoot=function(V,l){if(!PT(V))throw Error(W(299));var U=!1,Z="",R=gT;return null!=l&&(!0===l.unstable_strictMode&&(U=!0),void 0!==l.identifierPrefix&&(Z=l.identifierPrefix),void 0!==l.onRecoverableError&&(R=l.onRecoverableError)),l=DT(V,1,!1,null,0,U,0,Z,R),V[MZ]=l.current,IU(8===V.nodeType?V.parentNode:V),new vT(l)},m.findDOMNode=function(V){if(null==V)return null;if(1===V.nodeType)return V;var l=V._reactInternals;if(void 0===l){if("function"==typeof V.render)throw Error(W(188));throw V=Object.keys(V).join(","),Error(W(268,V))}return V=null===(V=gV(l))?null:V.stateNode},m.flushSync=function(V){return TT(V)},m.hydrate=function(V,l,U){if(!AT(l))throw Error(W(200));return _T(null,V,l,!0,U)},m.hydrateRoot=function(V,l,U){if(!PT(V))throw Error(W(405));var Z=null!=U&&U.hydratedSources||null,R=!1,d="",N=gT;if(null!=U&&(!0===U.unstable_strictMode&&(R=!0),void 0!==U.identifierPrefix&&(d=U.identifierPrefix),void 0!==U.onRecoverableError&&(N=U.onRecoverableError)),l=HT(l,null,V,1,null!=U?U:null,R,0,d,N),V[MZ]=l.current,IU(V),Z)for(V=0;V<Z.length;V++)R=(R=(U=Z[V])._getVersion)(U._source),null==l.mutableSourceEagerHydrationData?l.mutableSourceEagerHydrationData=[U,R]:l.mutableSourceEagerHydrationData.push(U,R);return new fT(l)},m.render=function(V,l,U){if(!AT(l))throw Error(W(200));return _T(null,V,l,!1,U)},m.unmountComponentAtNode=function(V){if(!AT(V))throw Error(W(40));return!!V._reactRootContainer&&(TT((function(){_T(null,null,V,!1,(function(){V._reactRootContainer=null,V[MZ]=null}))})),!0)},m.unstable_batchedUpdates=FT,m.unstable_renderSubtreeIntoContainer=function(V,l,U,Z){if(!AT(U))throw Error(W(200));if(null==V||void 0===V._reactInternals)throw Error(W(38));return _T(V,l,U,!1,Z)},m.version="18.3.1-next-f1338f8080-20240426",m}function E(){if(a)return k.exports;return a=1,function V(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(V)}catch(V){console.error(V)}}(),k.exports=S(),k.exports}var h,s,Y=V(function(){if(e)return M;e=1;var V=E();return M.createRoot=V.createRoot,M.hydrateRoot=V.hydrateRoot,M}()),J={exports:{}},G={};var X=(s||(s=1,J.exports=function(){if(h)return G;h=1;var V=d(),l=Symbol.for("react.element"),W=Symbol.for("react.fragment"),U=Object.prototype.hasOwnProperty,Z=V.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,R={key:!0,ref:!0,__self:!0,__source:!0};function N(V,W,d){var N,F={},T=null,a=null;for(N in void 0!==d&&(T=""+d),void 0!==W.key&&(T=""+W.key),void 0!==W.ref&&(a=W.ref),W)U.call(W,N)&&!R.hasOwnProperty(N)&&(F[N]=W[N]);if(V&&V.defaultProps)for(N in W=V.defaultProps)void 0===F[N]&&(F[N]=W[N]);return{$$typeof:l,type:V,key:T,ref:a,props:F,_owner:Z.current}}return G.Fragment=W,G.jsx=N,G.jsxs=N,G}()),J.exports),i=E();var x,r,Q={exports:{}},z={},o=(r||(r=1,Q.exports=function(){if(x)return z;x=1;var V=n,l=Symbol.for("react.element"),W=Symbol.for("react.fragment"),U=Object.prototype.hasOwnProperty,Z=V.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,R={key:!0,ref:!0,__self:!0,__source:!0};function d(V,W,d){var N,F={},T=null,a=null;for(N in void 0!==d&&(T=""+d),void 0!==W.key&&(T=""+W.key),void 0!==W.ref&&(a=W.ref),W)U.call(W,N)&&!R.hasOwnProperty(N)&&(F[N]=W[N]);if(V&&V.defaultProps)for(N in W=V.defaultProps)void 0===F[N]&&(F[N]=W[N]);return{$$typeof:l,type:V,key:T,ref:a,props:F,_owner:Z.current}}return z.Fragment=W,z.jsx=d,z.jsxs=d,z}()),Q.exports);function u(V,l,W){if(Array.isArray(V))return V;const U=new Array(l).fill(null).map((V=>function(V){return Object.fromEntries(V.map((V=>[V,w()])))}(W)));return V.then((V=>{V.length!==l&&console.warn(`Expected ${l} rows, got ${V.length}`);for(let l=0;l<V.length;l++){const Z=V[l];for(const V of W)U[l][V].resolve(Z[V])}})).catch((V=>{for(let Z=0;Z<l;Z++)for(const l of W)U[Z][l].reject(V)})),U}function w(){let V,l;const W=function(V){V instanceof Promise||(V=Promise.resolve(V));const l=V.then((V=>(l.resolved=V,V))).catch((V=>{throw l.rejected=V,V}));return l}(new Promise(((W,U)=>{V=W,l=U})));return W.resolve=V,W.reject=l,W}function y({header:V,cacheKey:l,columnWidths:W,orderBy:U,setOrderBy:Z,setColumnWidth:R,setColumnWidths:d,dataReady:N}){const[F,T]=t.useState(),a=t.useRef(V.map((()=>t.createRef())));function e(V){return V.current?V.current.offsetWidth-20:void 0}t.useEffect((()=>{const W=new Array(V.length);l&&B(l).forEach((({columnIndex:l,columnName:U,width:Z})=>{V[l]===U&&(W[l]=Z)})),d(W)}),[l]),t.useEffect((()=>{if(N){const V=a.current.map(e);d(V)}}),[l,N,V]),t.useEffect((()=>{function U(){if(!F)return;const{columnIndex:U}=F;if(l&&W[U]){const Z=W[U];D(l,{columnIndex:U,columnName:V[U],width:Z})}T(void 0)}function Z({clientX:V}){F&&R(F.columnIndex,Math.max(1,V-F.clientX))}return F&&(window.addEventListener("mousemove",Z),window.addEventListener("mouseup",U)),()=>{window.removeEventListener("mousemove",Z),window.removeEventListener("mouseup",U)}}),[l,V,F,d]);const n=t.useMemo((()=>W.map(j)),[W]);return o.jsx("thead",{children:o.jsxs("tr",{children:[o.jsx("th",{children:o.jsx("span",{})}),V.map(((d,N)=>o.jsxs("th",{"aria-sort":U===d?"ascending":void 0,className:U===d?"orderby":void 0,onClick:V=>{return l=d,void("SPAN"!==V.target.tagName&&(null==Z||Z(U===l?void 0:l)));var l},ref:a.current[N],style:n[N],title:d,children:[d,o.jsx("span",{onDoubleClick:()=>function(W){i.flushSync((()=>{R(W,void 0)}));const U=e(a.current[W]);l&&U&&D(l,{columnIndex:W,columnName:V[W],width:U}),R(W,U)}(N),onMouseDown:V=>{return l=N,(U=V).stopPropagation(),void T({columnIndex:l,clientX:U.clientX-(W[l]||0)});var l,U}})]},N)))]})})}function j(V){const l=V?`${V}px`:void 0;return{minWidth:l,maxWidth:l}}function B(V){const l=localStorage.getItem(`column-widths:${V}`);return l?JSON.parse(l):[]}function D(V,l){const W=[...B(V).filter((V=>V.columnIndex!==l.columnIndex)),l];localStorage.setItem(`column-widths:${V}`,JSON.stringify(W))}function C(V,l){switch(l.type){case"SET_ROWS":return{...V,startIndex:l.start,rows:l.rows,dataReady:V.dataReady||l.hasCompleteRow};case"SET_COLUMN_WIDTH":{const W=[...V.columnWidths];return W[l.columnIndex]=l.columnWidth,{...V,columnWidths:W}}case"SET_COLUMN_WIDTHS":return{...V,columnWidths:l.columnWidths};case"SET_ORDER":return{...V,orderBy:l.orderBy};case"SET_PENDING":return{...V,pending:l.pending};case"DATA_CHANGED":return{...V,dataReady:!1};default:return V}}const H={columnWidths:[],startIndex:0,rows:[],dataReady:!1,pending:!1};function I({data:V,cacheKey:l,overscan:W=20,padding:U=20,onDoubleClickCell:Z,onMouseDownCell:R,onError:d=console.error}){const[N,F]=t.useReducer(C,H),{columnWidths:T,startIndex:a,rows:e,orderBy:n,dataReady:M,pending:k}=N,m=t.useRef(0),c=t.useRef(null),p=t.useRef(null),b=t.useRef(0),S=t.useRef(!1);if(!V)throw new Error("HighTable: data is required");const E=33*(V.numRows+1);function h(l,W){if(l.length>0&&l.length!==V.header.length)return`Row ${W+1} length ${l.length} does not match header length ${V.header.length}`}t.useEffect((()=>{async function l(){var Z,R;const N=(null==(Z=c.current)?void 0:Z.clientHeight)||100,T=(null==(R=c.current)?void 0:R.scrollTop)||0,a=Math.floor(V.numRows*T/E),e=Math.ceil(V.numRows*(T+N)/E),t=Math.max(0,a-W),M=Math.min(V.numRows,e+W);if(isNaN(t))throw new Error("invalid start row "+t);if(isNaN(M))throw new Error("invalid end row "+M);if(M-t>1e3)throw new Error("too many rows to fetch "+(M-t));const k=33*Math.max(0,t-U);try{const W=++b.current,U=u(V.rows(t,M,n),M-t,V.header),Z=function(V){let l=0,W=!1;return()=>{const U=Date.now();U-l>10?(l=U,V()):W||(W=!0,setTimeout((()=>{l=Date.now(),W=!1,V()}),10-(U-l)))}}((()=>{const V=[];let l=!1;for(const W of U){const U={};let Z=!0;for(const[V,l]of Object.entries(W))"resolved"in l?U[V]=l.resolved:Z=!1;Z&&(l=!0),V.push(U)}m.current=k,F({type:"SET_ROWS",start:t,rows:V,hasCompleteRow:l})}));Z();for(const V of U)for(const[l,U]of Object.entries(V))U.then((()=>{b.current===W&&Z()})).catch((()=>{}));for(const V of U)for(const l of Object.values(V))await l;S.current&&(S.current=!1,l())}catch(V){F({type:"SET_PENDING",pending:!1}),d(V)}}l();const Z=c.current;return null==Z||Z.addEventListener("scroll",l),window.addEventListener("resize",l),()=>{null==Z||Z.removeEventListener("scroll",l),window.removeEventListener("resize",l)}}),[V,n,W,U,E,d]);const s=t.useMemo((()=>T.map(j)),[T]);t.useEffect((()=>{var V;null==(V=p.current)||V.focus()}),[]),t.useEffect((()=>{F({type:"DATA_CHANGED"})}),[V]);const Y=t.useCallback((V=>e[V].__index__??V+a+1),[e,a]),J=Array.from({length:Math.min(U,a)},(()=>[])),G=Array.from({length:Math.min(U,V.numRows-a-e.length)},(()=>[])),X=4*Math.ceil(Math.log10(V.numRows+1))+22,i=t.useMemo((()=>j(X)),[X]);if(V.header.length)return o.jsxs("div",{className:k?"table-container pending":"table-container",children:[o.jsx("div",{className:"table-scroll",ref:c,children:o.jsx("div",{style:{height:`${E}px`},children:o.jsxs("table",{"aria-colcount":V.header.length,"aria-rowcount":V.numRows,className:V.sortable?"table sortable":"table",ref:p,role:"grid",style:{top:`${m.current}px`},tabIndex:0,children:[o.jsx(y,{cacheKey:l,columnWidths:T,dataReady:M,header:V.header,orderBy:n,setColumnWidth:(V,l)=>F({type:"SET_COLUMN_WIDTH",columnIndex:V,columnWidth:l}),setColumnWidths:V=>F({type:"SET_COLUMN_WIDTHS",columnWidths:V}),setOrderBy:l=>V.sortable&&F({type:"SET_ORDER",orderBy:l})}),o.jsxs("tbody",{children:[J.map(((V,l)=>o.jsx("tr",{children:o.jsx("td",{style:i,children:(a-J.length+l+1).toLocaleString()})},a-J.length+l))),e.map(((l,W)=>o.jsxs("tr",{title:h(l,W),children:[o.jsx("td",{style:i,children:Y(W).toLocaleString()}),V.header.map(((V,U)=>{var d;return function(V,l,W,U){let d,N=O(V);return"string"==typeof N&&(N.length>400&&(N=`${N.slice(0,397)}…`),N.length>100&&(d=N)),o.jsx("td",{className:void 0===N?"pending":void 0,onDoubleClick:()=>null==Z?void 0:Z(l,U??W),onMouseDown:V=>null==R?void 0:R(V,l,U??W),style:s[l],title:d,children:N},l)}(l[V],U,a+W,null==(d=l.__index__)?void 0:d.resolved)}))]},a+W))),G.map(((V,l)=>o.jsx("tr",{children:o.jsx("td",{style:i,children:(a+e.length+l+1).toLocaleString()})},a+e.length+l)))]})]})})}),o.jsx("div",{className:"table-corner",style:i,children:" "}),o.jsx("div",{className:"mock-row-label",style:i,children:" "})]})}function O(V){return"string"==typeof V?V:"number"==typeof V?V.toLocaleString():Array.isArray(V)?`[${V.map(O).join(", ")}]`:null==V?JSON.stringify(V):V instanceof Date?V.toISOString():"object"==typeof V?`{${Object.entries(V).map((([V,l])=>`${V}: ${O(l)}`)).join(", ")}}`:V.toString()}const L=["BOOLEAN","INT32","INT64","INT96","FLOAT","DOUBLE","BYTE_ARRAY","FIXED_LEN_BYTE_ARRAY"],K=["PLAIN",void 0,"PLAIN_DICTIONARY","RLE","BIT_PACKED","DELTA_BINARY_PACKED","DELTA_LENGTH_BYTE_ARRAY","DELTA_BYTE_ARRAY","RLE_DICTIONARY","BYTE_STREAM_SPLIT"],g=["REQUIRED","OPTIONAL","REPEATED"],v=["UTF8","MAP","MAP_KEY_VALUE","LIST","ENUM","DECIMAL","DATE","TIME_MILLIS","TIME_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UINT_8","UINT_16","UINT_32","UINT_64","INT_8","INT_16","INT_32","INT_64","JSON","BSON","INTERVAL"],f=["UNCOMPRESSED","SNAPPY","GZIP","LZO","BROTLI","LZ4","ZSTD","LZ4_RAW"],P=["DATA_PAGE","INDEX_PAGE","DICTIONARY_PAGE","DATA_PAGE_V2"];function A(V,l,W){const U=V[l],Z=[];let R=1;if(U.num_children)for(;Z.length<U.num_children;){const U=V[l+R],d=A(V,l+R,[...W,U.name]);R+=d.count,Z.push(d)}return{count:R,element:U,children:Z,path:W}}function q(V,l){let W=A(V,0,[]);const U=[W];for(const V of l){const Z=W.children.find((l=>l.element.name===V));if(!Z)throw new Error(`parquet schema element not found: ${l}`);U.push(Z),W=Z}return U}const _=0,$=1,VV=2,lV=3,WV=4,UV=5,ZV=6,RV=7,dV=8,NV=9,FV=12,TV=13;function aV(V,l){switch(l){case $:return!0;case VV:return!1;case lV:return V.view.getInt8(V.offset++);case WV:case UV:return function(V){const l=eV(V);return l>>>1^-(1&l)}(V);case ZV:return function(V){const l=function(V){let l=0n,W=0n;for(;;){const U=V.view.getUint8(V.offset++);if(l|=BigInt(127&U)<<W,!(128&U))return l;W+=7n}}(V);return l>>BigInt(1)^-(l&BigInt(1))}(V);case RV:{const l=V.view.getFloat64(V.offset,!0);return V.offset+=8,l}case dV:{const l=eV(V),W=new Uint8Array(V.view.buffer,V.view.byteOffset+V.offset,l);return V.offset+=l,W}case NV:{const[l,W]=function(V){const l=V.view.getUint8(V.offset++),W=l>>4,U=tV(l);if(15===W){return[U,eV(V)]}return[U,W]}(V),U=l===$||l===VV,Z=new Array(W);for(let R=0;R<W;R++)Z[R]=U?1===aV(V,lV):aV(V,l);return Z}case FV:{const l={};let W=0;for(;;){let U,Z;if([U,Z,W]=nV(V,W),U===_)break;l[`field_${Z}`]=aV(V,U)}return l}case TV:{let l="";for(let W=0;W<16;W++)l+=V.view.getUint8(V.offset++).toString(16).padStart(2,"0");return l}default:throw new Error(`thrift unhandled type: ${l}`)}}function eV(V){let l=0,W=0;for(;;){const U=V.view.getUint8(V.offset++);if(l|=(127&U)<<W,!(128&U))return l;W+=7}}function tV(V){return 15&V}function nV(V,l){const W=V.view.getUint8(V.offset++);if((15&W)===_)return[0,0,l];const U=W>>4;let Z;if(!U)throw new Error("non-delta field id not supported");return Z=l+U,[tV(W),Z,Z]}async function MV(V,l=1<<19){if(!V)throw new Error("parquet file is required");if(!(V.byteLength>=0))throw new Error("parquet file byteLength is required");const W=Math.max(0,V.byteLength-l),U=await V.slice(W,V.byteLength),Z=new DataView(U);if(827474256!==Z.getUint32(U.byteLength-4,!0))throw new Error("parquet file invalid (footer != PAR1)");const R=Z.getUint32(U.byteLength-8,!0);if(R>V.byteLength-8)throw new Error(`parquet metadata length ${R} exceeds available buffer ${V.byteLength-8}`);if(R+8>l){const l=V.byteLength-R-8,Z=await V.slice(l,W),d=new ArrayBuffer(R+8),N=new Uint8Array(d);return N.set(new Uint8Array(Z)),N.set(new Uint8Array(U),W-l),kV(d)}return kV(U)}function kV(V){var l;if(!V)throw new Error("parquet file is required");const W=new DataView(V);if(W.byteLength<8)throw new Error("parquet file is too short");if(827474256!==W.getUint32(W.byteLength-4,!0))throw new Error("parquet file invalid (footer != PAR1)");const U=W.byteLength-8,Z=W.getUint32(U,!0);if(Z>W.byteLength-8)throw new Error(`parquet metadata length ${Z} exceeds available buffer ${W.byteLength-8}`);const R=function(V){let l=0;const W={};for(;V.offset<V.view.byteLength;){const[U,Z,R]=nV(V,l);if(l=R,U===_)break;W[`field_${Z}`]=aV(V,U)}return W}({view:W,offset:U-Z}),d=new TextDecoder;function N(V){return V&&d.decode(V)}const F=R.field_1,T=R.field_2.map((V=>({type:L[V.field_1],type_length:V.field_2,repetition_type:g[V.field_3],name:N(V.field_4),num_children:V.field_5,converted_type:v[V.field_6],scale:V.field_7,precision:V.field_8,field_id:V.field_9,logical_type:mV(V.field_10)}))),a=T.filter((V=>V.type));return{version:F,schema:T,num_rows:R.field_3,row_groups:R.field_4.map((V=>{var l;return{columns:V.field_1.map(((V,l)=>{var W,U;return{file_path:N(V.field_1),file_offset:V.field_2,meta_data:V.field_3&&{type:L[V.field_3.field_1],encodings:null==(W=V.field_3.field_2)?void 0:W.map((V=>K[V])),path_in_schema:V.field_3.field_3.map(N),codec:f[V.field_3.field_4],num_values:V.field_3.field_5,total_uncompressed_size:V.field_3.field_6,total_compressed_size:V.field_3.field_7,key_value_metadata:V.field_3.field_8,data_page_offset:V.field_3.field_9,index_page_offset:V.field_3.field_10,dictionary_page_offset:V.field_3.field_11,statistics:pV(V.field_3.field_12,a[l]),encoding_stats:null==(U=V.field_3.field_13)?void 0:U.map((V=>({page_type:P[V.field_1],encoding:K[V.field_2],count:V.field_3}))),bloom_filter_offset:V.field_3.field_14,bloom_filter_length:V.field_3.field_15,size_statistics:V.field_3.field_16&&{unencoded_byte_array_data_bytes:V.field_3.field_16.field_1,repetition_level_histogram:V.field_3.field_16.field_2,definition_level_histogram:V.field_3.field_16.field_3}},offset_index_offset:V.field_4,offset_index_length:V.field_5,column_index_offset:V.field_6,column_index_length:V.field_7,crypto_metadata:V.field_7,encrypted_column_metadata:V.field_8}})),total_byte_size:V.field_2,num_rows:V.field_3,sorting_columns:null==(l=V.field_4)?void 0:l.map((V=>({column_idx:V.field_1,descending:V.field_2,nulls_first:V.field_3}))),file_offset:V.field_5,total_compressed_size:V.field_6,ordinal:V.field_7}})),key_value_metadata:null==(l=R.field_5)?void 0:l.map((V=>({key:N(V.field_1),value:N(V.field_2)}))),created_by:N(R.field_6),metadata_length:Z}}function mV(V){return null!=V&&V.field_1?{type:"STRING"}:null!=V&&V.field_2?{type:"MAP"}:null!=V&&V.field_3?{type:"LIST"}:null!=V&&V.field_4?{type:"ENUM"}:null!=V&&V.field_5?{type:"DECIMAL",scale:V.field_5.field_1,precision:V.field_5.field_2}:null!=V&&V.field_6?{type:"DATE"}:null!=V&&V.field_7?{type:"TIME",isAdjustedToUTC:V.field_7.field_1,unit:cV(V.field_7.field_2)}:null!=V&&V.field_8?{type:"TIMESTAMP",isAdjustedToUTC:V.field_8.field_1,unit:cV(V.field_8.field_2)}:null!=V&&V.field_10?{type:"INTEGER",bitWidth:V.field_10.field_1,isSigned:V.field_10.field_2}:null!=V&&V.field_11?{type:"NULL"}:null!=V&&V.field_12?{type:"JSON"}:null!=V&&V.field_13?{type:"BSON"}:null!=V&&V.field_14?{type:"UUID"}:null!=V&&V.field_15?{type:"FLOAT16"}:V}function cV(V){if(V.field_1)return"MILLIS";if(V.field_2)return"MICROS";if(V.field_3)return"NANOS";throw new Error("parquet time unit required")}function pV(V,l){return V&&{max:bV(V.field_1,l),min:bV(V.field_2,l),null_count:V.field_3,distinct_count:V.field_4,max_value:bV(V.field_5,l),min_value:bV(V.field_6,l),is_max_value_exact:V.field_7,is_min_value_exact:V.field_8}}function bV(V,l){const{type:W,converted_type:U,logical_type:Z}=l;if(void 0===V)return V;if("BOOLEAN"===W)return 1===V[0];if("BYTE_ARRAY"===W)return(new TextDecoder).decode(V);const R=new DataView(V.buffer,V.byteOffset,V.byteLength);return"FLOAT"===W&&4===R.byteLength?R.getFloat32(0,!0):"DOUBLE"===W&&8===R.byteLength?R.getFloat64(0,!0):"INT32"===W&&"DATE"===U?new Date(864e5*R.getInt32(0,!0)):"INT64"===W&&"TIMESTAMP_MICROS"===U?new Date(Number(R.getBigInt64(0,!0)/1000n)):"INT64"===W&&"TIMESTAMP_MILLIS"===U||"INT64"===W&&"TIMESTAMP"===(null==Z?void 0:Z.type)?new Date(Number(R.getBigInt64(0,!0))):"INT32"===W&&4===R.byteLength?R.getInt32(0,!0):"INT64"===W&&8===R.byteLength?R.getBigInt64(0,!0):"DECIMAL"===U?function(V){let l=0;for(const W of V)l=l<<8|W;return l}(V)*Math.pow(10,-(l.scale||0)):"FLOAT16"===(null==Z?void 0:Z.type)?function(V){if(!V)return;const l=V[1]<<8|V[0],W=l>>15?-1:1,U=l>>10&31,Z=1023&l;return 0===U?W*Math.pow(2,-14)*(Z/1024):31===U?Z?NaN:W*(1/0):W*Math.pow(2,U-15)*(1+Z/1024)}(V):V}const SV="",EV=typeof self<"u"&&self.Blob&&new Blob([(hV=SV,Uint8Array.from(atob(hV),(V=>V.charCodeAt(0))))],{type:"text/javascript;charset=utf-8"});var hV;function sV(V){let l;try{if(l=EV&&(self.URL||self.webkitURL).createObjectURL(EV),!l)throw"";const W=new Worker(l,{name:null==V?void 0:V.name});return W.addEventListener("error",(()=>{(self.URL||self.webkitURL).revokeObjectURL(l)})),W}catch{return new Worker("data:text/javascript;base64,"+SV,{name:null==V?void 0:V.name})}finally{l&&(self.URL||self.webkitURL).revokeObjectURL(l)}}function YV(...V){return V.filter((V=>V)).join(" ")}async function JV({url:V,byteLength:l,headers:W}){return l||(l=await async function(V,l){return await fetch(V,{...l,method:"HEAD"}).then((V=>{if(!V.ok)throw new Error(`fetch head failed ${V.status.toString()}`);const l=V.headers.get("Content-Length");if(!l)throw new Error("missing content length");return parseInt(l)}))}(V,{headers:W})),{byteLength:l,async slice(l,U){const Z=void 0===U?"":U-1,R=await fetch(V,{headers:{...W,range:`bytes=${l.toString()}-${Z.toString()}`}});if(!R.ok||!R.body)throw new Error(`fetch failed ${R.status.toString()}`);return R.arrayBuffer()}}}let GV,XV=0;const iV=new Map;function xV({metadata:V,from:l,rowStart:W,rowEnd:U,orderBy:Z,onChunk:R}){return new Promise(((d,N)=>{const F=XV++;iV.set(F,{resolve:d,reject:N,onChunk:R});const T=(GV||(GV=new sV,GV.onmessage=({data:V})=>{const l=iV.get(V.queryId);if(!l)throw new Error(`Unexpected: no pending promise found for queryId: ${V.queryId.toString()}`);const{resolve:W,reject:U,onChunk:Z}=l;"error"in V?U(V.error):"result"in V?W(V.result):"chunk"in V?null==Z||Z(V.chunk):U(new Error("Unexpected message from worker"))}),GV),a=void 0!==R;T.postMessage({queryId:F,metadata:V,from:l,rowStart:W,rowEnd:U,orderBy:Z,chunks:a})}))}const rV="",QV=typeof self<"u"&&self.Blob&&new Blob([(V=>Uint8Array.from(atob(V),(V=>V.charCodeAt(0))))(rV)],{type:"text/javascript;charset=utf-8"});function zV(V){let l;try{if(l=QV&&(self.URL||self.webkitURL).createObjectURL(QV),!l)throw"";const W=new Worker(l,{name:null==V?void 0:V.name});return W.addEventListener("error",(()=>{(self.URL||self.webkitURL).revokeObjectURL(l)})),W}catch{return new Worker("data:text/javascript;base64,"+rV,{name:null==V?void 0:V.name})}finally{l&&(self.URL||self.webkitURL).revokeObjectURL(l)}}let oV,uV=0;const wV=new Map;function yV({metadata:V,from:l,orderBy:W}){return new Promise(((U,Z)=>{const R=uV++;wV.set(R,{resolve:U,reject:Z}),(oV||(oV=new zV,oV.onmessage=({data:V})=>{const l=wV.get(V.queryId);if(!l)throw new Error(`Unexpected: no pending promise found for queryId: ${V.queryId.toString()}`);const{resolve:W,reject:U}=l;"error"in V?U(V.error):"indices"in V?W(V.indices):U(new Error("Unexpected message from worker"))}),oV).postMessage({queryId:R,metadata:V,from:l,orderBy:W,sortIndex:!0})}))}function jV(V,l){const{children:W}=function(V){return q(V.schema,[])[0]}(l),U=W.map((V=>V.element.name)),Z=new Map,R=new Array(Number(l.num_rows)),d=new Array(l.row_groups.length).fill(!1);let N=0;const F=l.row_groups.map((V=>N+=Number(V.num_rows)));function T(W){if(!d[W]){const Z=F[W-1]||0,N=F[W];for(let V=Z;V<N;V++)R[V]=Object.fromEntries(U.map((V=>[V,w()])));xV({from:V,metadata:l,rowStart:Z,rowEnd:N}).then((V=>{var l;for(let W=Z;W<N;W++)for(const[U,d]of Object.entries(V[W-Z]))null==(l=R[W])||l[U].resolve(d)})).catch((V=>{console.error("Error fetching row group",V)})),d[W]=!0}}return{header:U,numRows:Number(l.num_rows),rows(W,N,a){if(a){const d=new Array(N-W).fill(null).map((()=>Object.fromEntries(U.map((V=>[V,w()])))));return function(W){let U=Z.get(W);return U||(U=yV({from:V,metadata:l,orderBy:W}),Z.set(W,U)),U}(a).then((V=>{for(const l of V.slice(W,N)){T(F.findIndex((V=>l<V)))}for(let l=W;l<N;l++)for(const Z of U){const U=R[V[l]];Z in U&&U[Z].then((V=>{var U;null==(U=d[l-W])||U[Z].resolve(V)})).catch((V=>{console.error("Error resolving sorted row",V)}))}})).catch((V=>{console.error("Error fetching sort index or resolving sorted rows",V)})),d}for(let V=0;V<d.length;V++){const l=F[V-1]||0;W<F[V]&&N>l&&T(V)}return R.slice(W,N)},sortable:!0}}function BV({urlKey:V}){return X.jsx("nav",{className:"top-header",children:X.jsx("div",{className:"path",children:X.jsx("a",{href:`/files?key=${V.raw}`,children:V.raw})})})}function DV({fileKey:V}){const l=V.raw.split("/");return X.jsx("nav",{className:"top-header",children:X.jsxs("div",{className:"path",children:[X.jsx("a",{href:"/files",children:"/"}),l.slice(0,-1).map(((V,W)=>X.jsxs("a",{href:`/files?key=${l.slice(0,W+1).join("/")}/`,children:[V,"/"]},W))),X.jsx("a",{href:`/files?key=${V.raw}`,children:V.fileName})]})})}function CV({parsedKey:V}){return"url"===V.kind?X.jsx(BV,{urlKey:V}):X.jsx(DV,{fileKey:V})}function HV({children:V,className:l,progress:W,error:U,title:Z}){const R=null==U?void 0:U.toString();return U&&console.error(U),t.useEffect((()=>{document.title=Z?`${Z} - hyperparam`:"hyperparam"}),[Z]),X.jsxs("main",{className:"main",children:[X.jsx(IV,{}),X.jsxs("div",{className:"content-container",children:[X.jsx("div",{className:YV("content",l),children:V}),X.jsx("div",{className:YV("error-bar",U&&"show-error"),children:R})]}),void 0!==W&&W<1&&X.jsx("div",{className:"progress-bar",role:"progressbar",children:X.jsx("div",{style:{width:100*W+"%"}})})]})}function IV(){return X.jsx("nav",{className:"nav",children:X.jsx("a",{className:"brand",href:"/",children:"hyperparam"})})}function OV({className:V}){return X.jsx("div",{className:YV("spinner",V)})}function LV({parsedKey:V,row:l,col:W}){const[U,Z]=t.useState(0),[R,d]=t.useState(),[N,F]=t.useState(),[T,a]=t.useState(),{resolveUrl:e,fileName:n}=V;return t.useEffect((()=>{0===U&&(Z(1),async function(){try{F(.25);const V=await JV({url:e,headers:{}}),U={url:e,byteLength:V.byteLength,headers:{}};F(.5);const Z=await MV(V);F(.75);const R=jV(U,Z),N=R.rows(l,l+1),T=await u(N,1,R.header)[0][R.header[W]].then(KV);d(T),a(void 0)}catch(V){a(V),d(void 0)}finally{Z(2),F(void 0)}}().catch((()=>{})))}),[e,W,l,U,a]),X.jsxs(HV,{progress:N,error:T,title:n,children:[X.jsx(CV,{parsedKey:V}),X.jsx("pre",{className:"viewer text",children:R})]})}function KV(V){return"string"==typeof V?V:"number"==typeof V?V.toLocaleString("en-US"):Array.isArray(V)?`[\n${V.map((V=>function(V,l){return null==V?void 0:V.split("\n").map((V=>" ".repeat(l)+V)).join("\n")}(KV(V),2))).join(",\n")}\n]`:null==V?JSON.stringify(V):V instanceof Date?V.toISOString():"object"==typeof V?`{${Object.entries(V).filter((V=>void 0!==V[1])).map((([V,l])=>`${V}: ${KV(l)}`)).join(", ")}}`:"{}"}function gV(V){if(null==V||!V.lastModified)return"";const l=new Date(V.lastModified),W=l.getTime();return Date.now()-W<864e5?l.toLocaleTimeString():l.toLocaleDateString()}function vV(V){if(null==V||!V.lastModified)return"";const l=new Date(V.lastModified);return isFinite(l.getTime())?l.toLocaleString():""}function fV(V){return void 0!==(null==V?void 0:V.fileSize)?function(V){const l=["b","kb","mb","gb","tb"];if(0===V)return"0 b";const W=Math.floor(Math.log2(V)/10);if(0===W)return V.toLocaleString("en-US")+" b";const U=V/Math.pow(1024,W);return(U<10?U.toFixed(1):Math.round(U)).toLocaleString("en-US")+" "+l[W]}(V.fileSize):""}function PV(V){const l=V.get("content-length");return l?Number(l):void 0}const AV={png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",svg:"image/svg+xml",tiff:"image/tiff",webp:"image/webp"},qV=[".png",".jpg",".jpeg",".gif",".svg",".tiff",".webp"];function _V({content:V,headers:l,children:W}){return X.jsxs("div",{className:"viewer",children:[X.jsxs("div",{className:"view-header",children:[(null==V?void 0:V.fileSize)&&X.jsx("span",{title:V.fileSize.toLocaleString("en-US")+" bytes",children:fV(V)}),l]}),W]})}function $V({parsedKey:V,setError:l}){const[W,U]=t.useState(0),[Z,R]=t.useState(),{fileName:d,resolveUrl:N}=V;return t.useEffect((()=>{async function V(){try{const V=await fetch(N);if(401===V.status){const W=await V.text();return l(new Error(W)),void R(void 0)}const W=function(V){let l="";const W=new Uint8Array(V);for(let V=0;V<W.byteLength;V++)l+=String.fromCharCode(W[V]);return btoa(l)}(await V.arrayBuffer()),U=`data:${function(V){const l=V.split(".").pop()??"";return AV[l]||"image/png"}(d)};base64,${W}`,Z=PV(V.headers);R({dataUri:U,fileSize:Z}),l(void 0)}catch(V){R(void 0),l(V)}finally{U(2)}}U((l=>0!==l?l:(V().catch((()=>{})),1)))}),[d,N,l]),X.jsxs(_V,{content:Z,children:[(null==Z?void 0:Z.dataUri)&&X.jsx("img",{alt:V.raw,className:"image",src:Z.dataUri}),W&&X.jsx(OV,{className:"center"})]})}function Vl({text:V,className:l}){return function(V){const W=[],U=V.split("\n");let Z=!1,R=[],d=!1,N=[];for(let V=0;V<U.length;V++){const l=U[V];if(l.startsWith("```")){Z?(W.push(X.jsx("pre",{children:R.join("\n")},`code-${V}`)),Z=!1,R=[]):Z=!0;continue}if(Z){R.push(l);continue}if(l.includes("**")){const U=l.split("**");W.push(X.jsx("p",{children:U.map(((V,l)=>l%2?X.jsx("strong",{children:V},l):V))},V));continue}if(l.includes("*")){const U=l.split("*");W.push(X.jsx("p",{children:U.map(((V,l)=>l%2?X.jsx("em",{children:V},l):V))},V));continue}if(l.startsWith("#")){const U=l.split(" ")[0].length,Z=l.slice(U+1),R=`h${U}`;W.push(X.jsx(R,{children:Z},V));continue}const F=l.match(/!\[(.*?)\]\((.*?)\)/);if(F){const[,l,U]=F;W.push(X.jsx("img",{src:U,alt:l},V))}else if(l.includes("[")&&l.includes("]")&&l.includes("(")&&l.includes(")")){const U=l.replace(/\[(.*?)\]\((.*?)\)/g,((V,l,W)=>`<a href="${W}">${l}</a>`));W.push(X.jsx("p",{dangerouslySetInnerHTML:{__html:U}},V))}else if(l.startsWith("-")||l.startsWith("*")||l.startsWith("+")){const W=l.slice(1).trim();N.push(X.jsx("li",{children:W},`list-item-${V}`)),d=!0}else d&&N.length>0&&(W.push(X.jsx("ul",{children:N},`list-${V}`)),N=[],d=!1),W.push(X.jsx("p",{children:l},V))}return Z&&R.length>0&&W.push(X.jsx("pre",{children:R.join("\n")},`code-${U.length}`)),d&&N.length>0&&W.push(X.jsx("ul",{children:N},`list-${U.length}`)),X.jsx("div",{className:l,children:W})}(V)}function ll({parsedKey:V,setError:l}){const[W,U]=t.useState(0),[Z,R]=t.useState(),{resolveUrl:d}=V;return t.useEffect((()=>{U((V=>0!==V?V:(async function(){try{const V=await fetch(d),W=await V.text(),U=PV(V.headers)??W.length;if(401===V.status)return l(new Error(W)),void R(void 0);l(void 0),R({text:W,fileSize:U})}catch(V){l(V),R(void 0)}finally{U(2)}}().catch((()=>{})),1)))}),[d,l]),X.jsxs(_V,{content:Z,children:[X.jsx(Vl,{className:"markdown",text:(null==Z?void 0:Z.text)??""}),1===W&&X.jsx(OV,{className:"center"})]})}function Wl({parsedKey:V,setProgress:l,setError:W}){const[U,Z]=t.useState(0),[R,d]=t.useState(),{resolveUrl:N,raw:F}=V;t.useEffect((()=>{0===U&&(Z(1),async function(){try{l(.33);const V=await JV({url:N,headers:{}}),W={url:N,byteLength:V.byteLength,headers:{}};l(.66);let U=jV(W,await MV(V));U=function(V){const l={};return{...V,rows(W,U,Z){var R;const d=l[R=Z||""]||(l[R]=new Array(V.numRows));let N;for(let l=W;l<U;l++)if(d[l]){if(void 0!==N){const W=l,U=W-N,R=u(V.rows(N,W,Z),U,V.header);for(let V=0;V<W-N;V++)d[N+V]=R[V];N=void 0}}else void 0===N&&(N=l);if(void 0!==N){const l=U,W=l-N,R=u(V.rows(N,l,Z),W,V.header);for(let V=0;V<l-N;V++)d[N+V]=R[V]}return d.slice(W,U)}}}(U);const Z=V.byteLength;d({dataframe:U,fileSize:Z})}catch(V){W(V)}finally{Z(2),l(1)}}().catch((()=>{})))}),[U,N,W,l]);const T=t.useCallback(((V,l)=>{location.href="/files?key="+F+"&row="+l+"&col="+V}),[F]),a=t.useCallback(((V,l,W)=>{1===V.button&&(V.preventDefault(),window.open("/files?key="+F+"&row="+W+"&col="+l,"_blank"))}),[F]),e=X.jsx(X.Fragment,{children:(null==R?void 0:R.dataframe)&&X.jsxs("span",{children:[R.dataframe.numRows.toLocaleString()," rows"]})});return X.jsxs(_V,{content:R,headers:e,children:[(null==R?void 0:R.dataframe)&&X.jsx(I,{cacheKey:N,data:R.dataframe,onDoubleClickCell:T,onMouseDownCell:a,onError:W}),U&&X.jsx(OV,{className:"center"})]})}function Ul({parsedKey:V,setError:l}){const[W,U]=t.useState(0),[Z,R]=t.useState(),d=t.useRef(null),{resolveUrl:N}=V;t.useEffect((()=>{U((V=>0!==V?V:(async function(){try{const V=await fetch(N),W=await V.text(),U=PV(V.headers)??W.length;if(401===V.status)return l(new Error(W)),void R(void 0);l(void 0),R({text:W,fileSize:U})}catch(V){l(V),R(void 0)}finally{U(2)}}().catch((()=>{})),1)))}),[N,l]);const F=X.jsx(X.Fragment,{children:X.jsxs("span",{children:[Zl((null==Z?void 0:Z.text)??"")," lines"]})});return X.jsxs(_V,{content:Z,headers:F,children:[X.jsx("code",{className:"text",ref:d,children:null==Z?void 0:Z.text}),W&&X.jsx(OV,{className:"center"})]})}function Zl(V){let l=0;for(const W of V)"\n"===W&&l++;return l.toLocaleString("en-US")}function Rl({parsedKey:V,setError:l,setProgress:W}){const{fileName:U}=V;return U.endsWith(".md")?X.jsx(ll,{parsedKey:V,setError:l}):U.endsWith(".parquet")?X.jsx(Wl,{parsedKey:V,setError:l,setProgress:W}):qV.some((V=>U.endsWith(V)))?X.jsx($V,{parsedKey:V,setError:l}):X.jsx(Ul,{parsedKey:V,setError:l,setProgress:W})}function dl({parsedKey:V}){const[l,W]=t.useState(),[U,Z]=t.useState();return X.jsxs(HV,{progress:l,error:U,title:V.fileName,children:[X.jsx(CV,{parsedKey:V}),X.jsx(Rl,{parsedKey:V,setProgress:W,setError:Z})]})}function Nl({folderKey:V}){const[l,W]=t.useState(),[U,Z]=t.useState(),R=t.useRef(null),{prefix:d}=V,N=d.split("/");t.useEffect((()=>{(async function(V){V=encodeURIComponent(V);const l=await fetch(`/api/store/list?prefix=${V}`);if(l.ok)return await l.json();throw new Error(`file list error ${l.status} ${await l.text()}`)})(d).then(W).catch((V=>{W([]),Z(V)}))}),[d]);const F=t.useCallback((V=>d?`/files?key=${d}/${V.key}`:`/files?key=${V.key}`),[d]);return X.jsxs(HV,{error:U,title:d,children:[X.jsx("nav",{className:"top-header",children:X.jsxs("div",{className:"path",children:[X.jsx("a",{href:"/files",children:"/"}),d&&d.split("/").map(((V,l)=>X.jsxs("a",{href:`/files?key=${N.slice(0,l+1).join("/")}/`,children:[V,"/"]},l)))]})}),l&&l.length>0&&X.jsx("ul",{className:"file-list",ref:R,children:l.map(((V,l)=>{var W;return X.jsx("li",{children:X.jsxs("a",{href:F(V),children:[X.jsx("span",{className:YV("file-name","file",V.key.endsWith("/")&&"folder"),children:V.key}),!V.key.endsWith("/")&&X.jsxs(X.Fragment,{children:[X.jsx("span",{className:"file-size",title:(null==(W=V.fileSize)?void 0:W.toLocaleString())+" bytes",children:fV(V)}),X.jsx("span",{className:"file-date",title:vV(V),children:gV(V)})]})]})},l)}))}),0===(null==l?void 0:l.length)&&X.jsx("div",{className:"center",children:"No files"}),void 0===l&&X.jsx(OV,{className:"center"})]})}function Fl(){const V=new URLSearchParams(location.search),l=decodeURIComponent(V.get("key")||"");if(Array.isArray(l))throw new Error("key must be a string");const W=function(V){if(""===V||V.endsWith("/")){const l=V.replace(/\/$/,"");return{kind:"folder",raw:V,prefix:l}}const l=V.replace(/\?.*$/,"").split("/").at(-1);if(!l)throw new Error("Invalid key");return V.startsWith("http://")||V.startsWith("https://")?{kind:"url",raw:V,resolveUrl:V,fileName:l}:{kind:"file",raw:V,resolveUrl:"/api/store/get?key="+V,fileName:l}}(l),U=V.get("row"),Z=V.get("col");return"folder"===W.kind?X.jsx(Nl,{folderKey:W}):null!==U&&null!==Z?X.jsx(LV,{parsedKey:W,row:Number(U),col:Number(Z)}):X.jsx(dl,{parsedKey:W})}if(!document.getElementById("app"))throw new Error("missing app element");Y.createRoot(document.getElementById("app")).render(n.createElement((function(){return X.jsx(Fl,{})})));
//# sourceMappingURL=app.min.js.map
